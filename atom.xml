<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Easyy</title>
  
  <subtitle>Wellcom!</subtitle>
  <link href="http://easyy1108.github.io/atom.xml" rel="self"/>
  
  <link href="http://easyy1108.github.io/"/>
  <updated>2021-05-10T15:17:25.052Z</updated>
  <id>http://easyy1108.github.io/</id>
  
  <author>
    <name>Easyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 复习总结</title>
    <link href="http://easyy1108.github.io/2021/05102540.html"/>
    <id>http://easyy1108.github.io/2021/05102540.html</id>
    <published>2021-05-10T12:38:21.000Z</published>
    <updated>2021-05-10T15:17:25.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓知识点复习总结"><a href="#安卓知识点复习总结" class="headerlink" title="安卓知识点复习总结"></a>安卓知识点复习总结</h1><h2 id="一、Android体系结构"><a href="#一、Android体系结构" class="headerlink" title="一、Android体系结构"></a>一、Android体系结构</h2><ol><li><p>应用程序层 Application<br>平常所用的Android应用程序都是在这一层上，这层开发的应用程序都是Java语言编写的，调用application framework提供的api完成。    </p></li><li><p>应用程序框架层 application framework<br>这层为开发人员提供了完全访问核心应用程序所使用的api框架  </p></li><li><p>核心类库 libraries<br>核心类库包含了系统提供一些核心库，允许开发者使用java语言编写Android application还包括了dalvik 虚拟机。  </p></li><li><p>Linux内核<br>内核作为一个抽象层，位于软件栈层和硬件层之间。  </p></br></br></li></ol><h2 id="二、模拟器创建的过程"><a href="#二、模拟器创建的过程" class="headerlink" title="二、模拟器创建的过程"></a>二、模拟器创建的过程</h2><ol><li>打开Android studio ，点击图标创建模拟器按钮  </li><li>create virtual device</li><li>点击左侧类别，创建自己的模拟器</li><li>选择操作系统</li><li>运行项目  </br></br></li></ol><h2 id="三、-Android-程序结构"><a href="#三、-Android-程序结构" class="headerlink" title="三、 Android 程序结构"></a>三、 Android 程序结构</h2><ul><li>manifests：存放AndroidManifest.xml  </li><li>Java ：存放所有的Java代码  </li><li>res：存放Android程序所用到的资源，如图片、布局文件、字符串  </li><li>GrandleScripts：用于存放项目创建的相关文件    </br></br></li></ul><h2 id="四、什么是布局？"><a href="#四、什么是布局？" class="headerlink" title="四、什么是布局？"></a>四、什么是布局？</h2><p>布局全名为 布局管理器，是对ViewGroup类的扩展，用来控制子空间在ui中的位置。<br></br><br></br></p><h2 id="五、布局的类型有哪些？特点？控件属性？"><a href="#五、布局的类型有哪些？特点？控件属性？" class="headerlink" title="五、布局的类型有哪些？特点？控件属性？"></a>五、布局的类型有哪些？特点？控件属性？</h2><h3 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a><strong>线性布局</strong></h3><p>   线性布局以水平和垂直方式来显示界面中的ui控件<br>   水平排列：显示顺序依次为从左到右<br>   垂直排列：显示顺序依次为从上到下  </p><p>   重要属性：<strong>orientation</strong> </p><h3 id="相对布局-relativelayout"><a href="#相对布局-relativelayout" class="headerlink" title="相对布局 relativelayout"></a><strong>相对布局</strong> relativelayout</h3><p>&nbsp; Android应用程序创建时默认的额布局，相对布局是通过相对定位的额方式指定控件位置。<br></br></p><table><thead><tr><th>控件属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:layout_centerInParent</td><td>设置当前控件位于父布局的中央位置</td></tr><tr><td>android:layout_centerVetical</td><td>设置当前控件位于父布局的垂直居中</td></tr><tr><td>android:layout_centerHorizontal</td><td>设置当前控件位于父布局的额水平居中</td></tr><tr><td></br></td><td></td></tr><tr><td>android:layout_above</td><td>设置当前控件位于某控件上方</td></tr><tr><td>android:layout_below</td><td>设置当前控件位于某控件下方</td></tr><tr><td>android:layout_toLeftOf</td><td>设置当前控件位于某控件左侧</td></tr><tr><td>android:layout_toRightOf</td><td>设置当前控件位于某控件右侧</td></tr><tr><td></br></td><td></td></tr><tr><td>android:layout_alignParentTop</td><td>设置当前控件是否位与父控件顶端对齐</td></tr><tr><td>android:layout_alignParentLeft</td><td>设置当前控件是否位与父控件左对齐</td></tr><tr><td>android:layout_alignParentRight</td><td>设置当前控件是否位与父控件右对齐</td></tr><tr><td>android:layout_alignParenBottom</td><td>设置当前控件是否位与父控件底端对齐</td></tr><tr><td></br></td><td></td></tr><tr><td>android:layout_alignTop</td><td>设置当前控件的上边界是否与某控件对齐</td></tr><tr><td>android:layout_alignBottom</td><td>设置当前控件的下边界是否与某控件对齐</td></tr><tr><td>android:layout_alignLeft</td><td>设置当前控件的左边界是否与某控件对齐</td></tr><tr><td>android:layout_alignRight</td><td>设置当前控件的右边界是否与某控件对齐</td></tr><tr><td></br></td><td></td></tr></tbody></table><p>&nbsp; 相对于某控件间距的属性 </p><table><thead><tr><th>控件属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:layout_marginTop</td><td>设置当前控件上边界与某控件的距离</td></tr><tr><td>android:layout_marginBottom</td><td>设置当前控件下边界与某控件的距离</td></tr><tr><td>android:layout_marginLeft</td><td>设置当前控件左边界与某控件的距离</td></tr><tr><td>android:layout_marginRight</td><td>设置当前控件右边界与某控件的距离</td></tr></tbody></table></br><p>&nbsp; 设置内边距属性    </p><table><thead><tr><th>控件属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:paddingTop</td><td>设置布局顶部内边距的距离</td></tr><tr><td>android:paddingBottom</td><td>设置布局底部内边距的距离</td></tr><tr><td>android:paddingLeft</td><td>设置布局左边内边距的距离</td></tr><tr><td>android:paddingLeft</td><td>设置布局右边内边距的距离</td></tr><tr><td>android:padding</td><td>设置布局四周内边距的距离</td></tr></tbody></table></br>  <h3 id="帧布局-frameLayout"><a href="#帧布局-frameLayout" class="headerlink" title="帧布局 frameLayout"></a><strong>帧布局</strong> frameLayout</h3><p>&nbsp; 帧布局是Android中最为常见的一种布局，该布局为每个加入其中的控件创建一个空白区域，采用帧布局方式设计界面时，所有控件都默认显示在左上角，并按照先后放入的顺序重叠摆放。<br></br></p><table><thead><tr><th>控件属性</th><th>功能描述</th></tr></thead><tbody><tr><td>andriod:foreground</td><td>设置帧布局容器的前景图片</td></tr><tr><td>android:foregroundGravity</td><td>设置前景图片显示位置</td></tr></tbody></table><pre class=" language-java"><code class="language-java">andriod<span class="token operator">:</span>foreground<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span>andriod<span class="token operator">:</span>foregroundGravity<span class="token operator">=</span><span class="token string">"left"</span>  </code></pre><h3 id="表格布局-tablelayout"><a href="#表格布局-tablelayout" class="headerlink" title="表格布局  tablelayout"></a><strong>表格布局</strong>  tablelayout</h3><p>表格布局是以表格形式排列控件的，通过行列将界面划分为多个单元格，每个单元格都可以添加控件。表格布局需要配合TableRow对象组成，<font color=#00fff>因此TableRow的数量决定表格的行数</font>。  </p></br>  <table><thead><tr><th>布局属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:stretchColumns</td><td>设置该列被拉伸，列号从“0”开始。</td></tr><tr><td>android:shrinkColumns</td><td>设置该列被收缩，列号从“0”开始</td></tr><tr><td>android:collapseColumns</td><td>设置该列被隐藏，列号从“0”开始</td></tr></tbody></table></br> <table><thead><tr><th>控件属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:layout_column</td><td>设置改单元显示位置</td></tr><tr><td>android:layout_span</td><td>设置该单元格占几行，默认一行</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>TableLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>stretchColumns<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TableRow<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_column<span class="token operator">=</span><span class="token string">"0"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"btn1"</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_column<span class="token operator">=</span><span class="token string">"1"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"btn2"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>TableRow<span class="token operator">></span>    <span class="token operator">&lt;</span>TableRow<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_column<span class="token operator">=</span><span class="token string">"1"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"btn3"</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_column<span class="token operator">=</span><span class="token string">"2"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"btn4"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>TableRow<span class="token operator">></span>    <span class="token operator">&lt;</span>TableRow<span class="token operator">></span>        <span class="token operator">&lt;</span>Button            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_column<span class="token operator">=</span><span class="token string">"2"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"btn5"</span>            <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>TableRow<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>TableLayout<span class="token operator">></span></code></pre><p>结果如图：<br><img src="https://i.loli.net/2021/05/10/Qr9kU6wodXef1BF.png" alt="tablelayout.png"></p></br><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a><strong>绝对布局</strong></h3><p>绝对布局是通过制定x，y坐标来控制每一个控件位置，目前已经遗弃。  </p></br></br><h2 id="六、常用控件"><a href="#六、常用控件" class="headerlink" title="六、常用控件"></a>六、常用控件</h2><h3 id="TextView-—-显示文本信息"><a href="#TextView-—-显示文本信息" class="headerlink" title="TextView —-显示文本信息"></a>TextView —-显示文本信息</h3><table><thead><tr><th>布局属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:text</td><td></td></tr><tr><td>android:textColor</td><td></td></tr><tr><td>android:textSize</td><td></td></tr><tr><td>android:textStyle</td><td></td></tr><tr><td>android:height</td><td></td></tr><tr><td>android:width</td><td></td></tr><tr><td>android:maxLength</td><td></td></tr><tr><td>android:password</td><td></td></tr><tr><td>android:gravity</td><td></td></tr><tr><td>android:phoneNumber</td><td></td></tr><tr><td>android:layout_height</td><td></td></tr><tr><td>android:layout_width</td><td></td></tr></tbody></table></br>  <pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"hello"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"#00ffff"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"25sp"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>        <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span></code></pre></br>  <p>效果如下： </p><p><img src="https://i.loli.net/2021/05/10/zygIHPD8OjeXNJE.png" alt="textview.png">  </p></br><h3 id="Tips-layout-width-、layout-height-、-width-、height的区别"><a href="#Tips-layout-width-、layout-height-、-width-、height的区别" class="headerlink" title="Tips  layout_width 、layout_height 、 width 、height的区别"></a>Tips  layout_width 、layout_height 、 width 、height的区别</h3><p>在Android系统中，layout width、 layout height 属性和width、height 属性的功能是相同的，都用于设置控件的宽、高，只不过带”layout” 前缀的属性通常是相对父控件而言的，而width.height属性是相对于控件本身而言的。下面对比一下它们在使用时的区别。</p><ol><li><p>layout, width 和layout heigt 属性可以单独使用，而widh和heigt属性不能，如果单独使用width和height属性，此时的控件是不显示的。</p></li><li><p>layout width和layout height可以设置为wrap content或者match_ parent, 而width和height只能设置固定值，否则会产生编译错误。</p></li><li><p>如果要使用width和height, 就必须同时设置layout _width和layout height 属性，把width和height作为组件的微调使用。</p></li></ol><p>简单方便。综上所述，在设置TexView控件宽、高时，通常直接使用layout_width和layout _height.</p></br></br><h3 id="EditText-文本编辑控件"><a href="#EditText-文本编辑控件" class="headerlink" title="EditText 文本编辑控件"></a>EditText 文本编辑控件</h3><table><thead><tr><th>布局属性</th><th>功能描述</th></tr></thead><tbody><tr><td>android:hint</td><td>设置EditText没有输入内容时显示的提示文本</td></tr><tr><td>android:lines</td><td>设置固定行数来决定EditText的高度</td></tr><tr><td>android:maxLines</td><td>设置最大行数</td></tr><tr><td>android:minLines</td><td>设置最小行数</td></tr><tr><td>android:password</td><td>设置文本以密码形式“.”显示</td></tr><tr><td>android:phoneNumber</td><td>设置文本以电话号码方式输入</td></tr><tr><td>android:scrollHorizontally</td><td>设置文本超出TxVew的宽度的情况下，是否出现横拉条设置首字母大写</td></tr><tr><td>android:capitalize</td><td>设置首字母大写</td></tr><tr><td>android:editable</td><td>设置是否可编辑</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>padding<span class="token operator">=</span><span class="token string">"10dp"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>    <span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"姓名"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"28sp"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"#00ffff"</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>EditText        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"输入姓名"</span>        android<span class="token operator">:</span>maxLines<span class="token operator">=</span><span class="token string">"2"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"20sp"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"#00ffff"</span>        android<span class="token operator">:</span>textStyle<span class="token operator">=</span><span class="token string">"italic"</span>        <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p><img src="https://i.loli.net/2021/05/10/pBuGMg8KkqyvJEU.png" alt="edittext.png">  </p><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安卓知识点复习总结&quot;&gt;&lt;a href=&quot;#安卓知识点复习总结&quot; class=&quot;headerlink&quot; title=&quot;安卓知识点复习总结&quot;&gt;&lt;/a&gt;安卓知识点复习总结&lt;/h1&gt;&lt;h2 id=&quot;一、Android体系结构&quot;&gt;&lt;a href=&quot;#一、Android体系结</summary>
      
    
    
    
    
    <category term="Android" scheme="http://easyy1108.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-简单工厂模式</title>
    <link href="http://easyy1108.github.io/2021/032832068.html"/>
    <id>http://easyy1108.github.io/2021/032832068.html</id>
    <published>2021-03-28T13:22:05.000Z</published>
    <updated>2021-03-28T13:34:23.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简单工厂模式介绍"><a href="#一、简单工厂模式介绍" class="headerlink" title="一、简单工厂模式介绍"></a>一、简单工厂模式介绍</h1><p>说到简单工厂，自然的第一个疑问当然就是什么是简单工厂模式了？<br>在现实生活中工厂是负责生产产品的,同样在设计模式中,简单工厂模式我们也可以理解为负责生产对象的一个类, 我们平常编程中，当使用”new”关键字创建一个对象时，此时该类就依赖与这个对象，也就是他们之间的耦合度高，当需求变化时，我们就不得不去修改此类的源码，此时我们可以运用面向对象（OO）的很重要的原则去解决这一的问题，该原则就是——封装改变，既然要封装改变，自然也就要找到改变的代码，然后把改变的代码用类来封装，这样的一种思路也就是我们简单工厂模式的实现方式了。下面通过一个现实生活中的例子来引出简单工厂模式。<br>在外面打工的人，免不了要经常在外面吃饭，当然我们也可以自己在家做饭吃，但是自己做饭吃麻烦，因为又要自己买菜，然而，出去吃饭就完全没有这些麻烦的，我们只需要到餐馆点菜就可以了，买菜的事情就交给餐馆做就可以了，这里餐馆就充当简单工厂的角色，下面让我们看看现实生活中的例子用代码是怎样来表现的。<br>自己做饭的情况：</p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 自己做饭的情况</span>    <span class="token comment" spellcheck="true">/// 没有简单工厂之前，客户想吃什么菜只能自己炒的</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 烧菜方法</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="type">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Food <span class="token function">Cook</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Food food <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 客户A说：我想吃西红柿炒蛋怎么办？</span>            <span class="token comment" spellcheck="true">// 客户B说：那你就自己烧啊</span>            <span class="token comment" spellcheck="true">// 客户A说： 好吧，那就自己做吧</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"西红柿炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomatoScrambledEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 我又想吃土豆肉丝, 这个还是得自己做</span>            <span class="token comment" spellcheck="true">// 我觉得自己做好累哦，如果能有人帮我做就好了？</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShreddedPorkWithPotatoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> food<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 做西红柿炒蛋</span>            Food food1 <span class="token operator">=</span> <span class="token function">Cook</span><span class="token punctuation">(</span><span class="token string">"西红柿炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            food1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Food food2 <span class="token operator">=</span> <span class="token function">Cook</span><span class="token punctuation">(</span><span class="token string">"土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            food1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 菜抽象类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Food</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出点了什么菜</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 西红柿炒鸡蛋这道菜</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomatoScrambledEggs</span> <span class="token punctuation">:</span> Food    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"一份西红柿炒蛋！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 土豆肉丝这道菜</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShreddedPorkWithPotatoes</span> <span class="token punctuation">:</span> Food    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"一份土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>自己做饭，如果我们想吃别的菜时，此时就需要去买这种菜和洗菜这些繁琐的操作，有了餐馆（也就是简单工厂）之后，我们就可以把这些操作交给餐馆去做，此时消费者（也就是我们）对菜（也就是具体对象）的依赖关系从直接变成的间接的，这样就是实现了面向对象的另一个原则——降低对象之间的耦合度，下面就具体看看有了餐馆之后的实现代码（即简单工厂的实现）：  </p><pre class=" language-csharp"><code class="language-csharp">    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 顾客充当客户端，负责调用简单工厂来生产对象</span>    <span class="token comment" spellcheck="true">/// 即客户点菜，厨师（相当于简单工厂）负责烧菜(生产的对象)</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 客户想点一个西红柿炒蛋        </span>            Food food1 <span class="token operator">=</span> FoodSimpleFactory<span class="token punctuation">.</span><span class="token function">CreateFood</span><span class="token punctuation">(</span><span class="token string">"西红柿炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            food1<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 客户想点一个土豆肉丝</span>            Food food2 <span class="token operator">=</span> FoodSimpleFactory<span class="token punctuation">.</span><span class="token function">CreateFood</span><span class="token punctuation">(</span><span class="token string">"土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            food2<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 菜抽象类</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Food</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出点了什么菜</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 西红柿炒鸡蛋这道菜</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomatoScrambledEggs</span> <span class="token punctuation">:</span> Food    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"一份西红柿炒蛋！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 土豆肉丝这道菜</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShreddedPorkWithPotatoes</span> <span class="token punctuation">:</span> Food    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"一份土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 简单工厂类, 负责 炒菜</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoodSimpleFactory</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Food <span class="token function">CreateFood</span><span class="token punctuation">(</span><span class="token keyword">string</span> type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Food food <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"土豆肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                food<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShreddedPorkWithPotatoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"西红柿炒蛋"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                food<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomatoScrambledEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">return</span> food<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="二、优点与缺点"><a href="#二、优点与缺点" class="headerlink" title="二、优点与缺点"></a>二、优点与缺点</h1><p>看完简单工厂模式的实现之后，你和你的小伙伴们肯定会有这样的疑惑（因为我学习的时候也有）——这样我们只是把变化移到了工厂类中罢了，好像没有变化的问题，因为如果客户想吃其他菜时，此时我们还是需要修改工厂类中的方法（也就是多加case语句，没应用简单工厂模式之前，修改的是客户类）。我首先要说：你和你的小伙伴很对，这个就是简单工厂模式的缺点所在（这个缺点后面介绍的工厂方法可以很好地解决），然而，简单工厂模式与之前的实现也有它的优点：  </p><ul><li>简单工厂模式解决了客户端直接依赖于具体对象的问题，客户端可以消除直接创建对象的责任，而仅仅是消费产品。简单工厂模式实现了对责任的分割。</li><li>简单工厂模式也起到了代码复用的作用，因为之前的实现（自己做饭的情况）中，换了一个人同样要去在自己的类中实现做菜的方法，然后有了简单工厂之后，去餐馆吃饭的所有人都不用那么麻烦了，只需要负责消费就可以了。此时简单工厂的烧菜方法就让所有客户共用了。（同时这点也是简单工厂方法的缺点——因为工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都会受到影响，也没什么不好理解的，就如事物都有两面性一样道理）<br>缺点：  </li><li>工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都会受到影响（通俗地意思就是：一旦餐馆没饭或者关门了，很多不愿意做饭的人就没饭吃了  </li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，这样就会造成工厂逻辑过于复杂。了解了简单工厂模式之后的优缺点之后，我们之后就可以知道简单工厂的应用场景了</li><li>当工厂类负责创建的对象比较少时可以考虑使用简单工厂模式</li><li>客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时可以考虑使用简单工厂模式  </li></ul><h1 id="三、简单工厂模式的UML"><a href="#三、简单工厂模式的UML" class="headerlink" title="三、简单工厂模式的UML"></a>三、简单工厂模式的UML</h1><p>简单工厂模式又叫静态方法模式（因为工厂类都定义了一个静态方法），由一个工厂类根据传入的参数决定创建出哪一种产品类的实例（通俗点表达：通过客户下的订单来负责烧那种菜）。简单工厂模式的UML图如下：<br><img src="https://i.loli.net/2021/03/28/FcYfK3Ms85ktA4d.png" alt="简单工厂模式">  </p><h1 id="四、-NET中简单工厂实现"><a href="#四、-NET中简单工厂实现" class="headerlink" title="四、.NET中简单工厂实现"></a>四、.NET中简单工厂实现</h1><p>介绍完了简单工厂模式之后，我学习的时候就像：.NET类库中是否有实现了简单工厂模式的类呢？后面确实有，.NET中System.Text.Encoding类就实现了简单工厂模式，该类中的GetEncoding(int codepage)就是工厂方法，具体的代码可以通过Reflector反编译工具进行查看，下面我也贴出该方法中部分代码：<br>.NET 中Encoding的UML图为：<br><img src="https://i.loli.net/2021/03/28/wSY6evxkac4gT5r.png" alt=".NET"><br>Encoding类中实现的简单工厂模式是简单工厂模式的一种演变，此时简单工厂类由抽象产品角色扮演，然而.NET中Encoding类是如何解决简单工厂模式中存在的问题的呢（即如果新添加一种编码怎么办）？在GetEncoding方法里的switch函数有如下代码：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">switch</span> <span class="token punctuation">(</span>codepage<span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">default</span><span class="token punctuation">:</span>           unicode <span class="token operator">=</span> <span class="token function">GetEncodingCodePage</span><span class="token punctuation">(</span>codepage<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>unicode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>               unicode <span class="token operator">=</span> <span class="token function">GetEncodingRare</span><span class="token punctuation">(</span>codepage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当编码很少见时</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span></code></pre><p>在GetEncodingRare方法里有一些不常用编码的实例化代码，微软正式通过这个方法来解决新增加一种编码的问题。（其实也就是列出所有可能的编码情况），微软之所以以这样的方式来解决这个问题，可能是由于现在编码已经稳定了，添加新编码的可能性比较低，所以在.NET 4.5仍然未改动这部分代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、简单工厂模式介绍&quot;&gt;&lt;a href=&quot;#一、简单工厂模式介绍&quot; class=&quot;headerlink&quot; title=&quot;一、简单工厂模式介绍&quot;&gt;&lt;/a&gt;一、简单工厂模式介绍&lt;/h1&gt;&lt;p&gt;说到简单工厂，自然的第一个疑问当然就是什么是简单工厂模式了？&lt;br&gt;在现实生</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://easyy1108.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="简单工厂模式" scheme="http://easyy1108.github.io/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法合集</title>
    <link href="http://easyy1108.github.io/2021/032839958.html"/>
    <id>http://easyy1108.github.io/2021/032839958.html</id>
    <published>2021-03-28T08:02:47.000Z</published>
    <updated>2021-03-28T13:34:23.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序的平均时间复杂度也是 O(n^2)，空间复杂度为常数阶 O(1)，具体时间复杂度和数组的有序性也是有关联的。</p><p>插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较 N-1 次，时间复杂度为 O(N)。最坏的情况是待排序数组是逆序的，此时需要比较次数最多，最坏的情况是 O(n^2)。  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果： 1356778  </p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minIndex<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>两个数比较大小，较大的数下沉，较小的数冒起来。  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><img src="https://i.loli.net/2021/03/28/g3Lr5nIjquO28Zx.gif" alt="heapSort"></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">HeapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建新数组</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempKey<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tempKey<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//初始数据建堆（从最后一个节点的子树开始构建，依次向前，形成二叉堆）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Restore</span><span class="token punctuation">(</span>tempKey<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不断输出堆顶元素 并重构堆，排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> tempKey<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tempKey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tempKey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tempKey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token function">Restore</span><span class="token punctuation">(</span>tempKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//结果返回到arr</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tempKey<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//针对已经构建好的二叉堆首尾互换之后的重构</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Restore</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> rootNode<span class="token punctuation">,</span> <span class="token keyword">int</span> nodeCount<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rootNode <span class="token operator">&lt;=</span> nodeCount <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> rootNode <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> nodeCount <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> rootNode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> rootNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span>                          <span class="token number">2</span> <span class="token operator">*</span> rootNode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token operator">*</span> rootNode<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>rootNode<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>rootNode<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>rootNode<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    rootNode <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>另一种写法，可能更好理解：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> Sort<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">HeapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 堆排序</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="arr">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="len">&lt;/param></span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//建立最大堆</span>            <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">Heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 建立最大堆，从最后一个父节点，反着遍历，确保是最大堆</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="arr">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="len">&lt;/param></span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> lastNode <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后的节点</span>            <span class="token keyword">int</span> parentNode <span class="token operator">=</span> <span class="token punctuation">(</span>lastNode <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父节点</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> parentNode<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 建堆</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="arr">&lt;/param> 数组</span>        <span class="token comment" spellcheck="true">/// &lt;param name="len">&lt;/param> 数组长度 相当于节点数</span>        <span class="token comment" spellcheck="true">/// &lt;param name="i">&lt;/param>   相当于根节点</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根节点比节点总数大，直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> leftNodeIndex <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左节点</span>            <span class="token keyword">int</span> rigthNodeIndex <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右节点</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//把当前根节点作为最大值得节点</span>            <span class="token comment" spellcheck="true">//判断左右子节点是不是比根节点大</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftNodeIndex<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>leftNodeIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                max <span class="token operator">=</span> leftNodeIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rigthNodeIndex<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rigthNodeIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                max <span class="token operator">=</span> rigthNodeIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//判断是否需要交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">Heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 交换</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="arr">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="i">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="max">&lt;/param></span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序是用分治思想，分治模式在每一层递归上有三个步骤：<br>分解（Divide）：将n个元素分成个含n/2个元素的子序列。<br>解决（Conquer）：用合并排序法对两个子序列递归的排序。<br>合并（Combine）：合并两个已排序的子序列已得到排序结果。<br><img src="https://i.loli.net/2021/03/28/rTCk9yIfimGq1vA.png" alt="归并.png"></p><pre class=" language-csharp"><code class="language-csharp"></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;p&gt;插入排序的平均时间复杂度也是 O(n^2)，空间复杂度为常数阶 O(1)，具体时间复杂度和数组的有序性也是有关联的。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
    <category term="排序算法" scheme="http://easyy1108.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C#-集合</title>
    <link href="http://easyy1108.github.io/2021/032349341.html"/>
    <id>http://easyy1108.github.io/2021/032349341.html</id>
    <published>2021-03-23T13:40:14.000Z</published>
    <updated>2021-03-25T08:12:26.018Z</updated>
    
    <content type="html"><![CDATA[<p>集合（Collection）类是专门用于数据存储和检索的类。这些类提供了对栈（stack）、队列（queue）、列表（list）和哈希表（hash table）的支持。大多数集合类实现了相同的接口。  </p><p>集合（Collection）类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建 Object 类的对象的集合。在 C# 中，Object 类是所有数据类型的基类。<br>下面是各种常用的 System.Collection 命名空间的类:  </p><h2 id="动态数组-ArrayList"><a href="#动态数组-ArrayList" class="headerlink" title="动态数组-ArrayList"></a><font color=#FF69B4>动态数组-ArrayList</font></h2><p>它代表了可被单独索引的对象的有序集合。<br>它基本上可以替代一个数组。但是，与数组不同的是，您可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。<br><font color=#00ffff>ArrayList的一些属性:</font>  </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity</td><td>获取或设置 ArrayList 可以包含的元素个数。</td></tr><tr><td>Count</td><td>获取 ArrayList 中实际包含的元素个数。</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示 ArrayList 是否具有固定大小。</td></tr><tr><td>IsReadOnly</td><td>获取一个值，表示 ArrayList 是否只读。</td></tr><tr><td>IsSynchronized</td><td>获取一个值，表示访问 ArrayList 是否同步（线程安全）。</td></tr><tr><td>Item[Int32]</td><td>获取或设置指定索引处的元素。</td></tr><tr><td>SyncRoot</td><td>获取一个对象用于同步访问 ArrayList。</td></tr></tbody></table><p><font color=#00ffff>ArrayList类的一些常用方法：</font>  </p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual int Add( object value );</td><td>在 ArrayList 的末尾添加一个对象。</td></tr><tr><td>public virtual void AddRange( ICollection c );</td><td>在 ArrayList 的末尾添加 ICollection 的元素。</td></tr><tr><td>public virtual void Clear();</td><td>从 ArrayList 中移除所有的元素。</td></tr><tr><td>public virtual bool Contains( object item );</td><td>判断某个元素是否在 ArrayList 中。</td></tr><tr><td>public virtual ArrayList GetRange( int index, int count );</td><td>返回一个 ArrayList，表示源 ArrayList 中元素的子集</td></tr><tr><td>public virtual int IndexOf(object);</td><td>返回某个值在 ArrayList 中第一次出现的索引，索引从零开始。</td></tr><tr><td>public virtual void Insert( int index, object value );</td><td>在 ArrayList 的指定索引处，插入一个元素。</td></tr><tr><td>public virtual void InsertRange( int index, ICollection c );</td><td>在 ArrayList 的指定索引处，插入某个集合的元素。</td></tr><tr><td>public virtual void Remove( object obj );</td><td>从 ArrayList 中移除第一次出现的指定对象。</td></tr><tr><td>public virtual void RemoveAt( int index );</td><td>移除 ArrayList 的指定索引处的元素。</td></tr><tr><td>public virtual void RemoveRange( int index, int count );</td><td>从 ArrayList 中移除某个范围的元素。</td></tr><tr><td>public virtual void Reverse();</td><td>逆转 ArrayList 中元素的顺序。</td></tr><tr><td>public virtual void SetRange( int index, ICollection c );</td><td>复制某个集合的元素到 ArrayList 中某个范围的元素上。</td></tr><tr><td>public virtual void Sort();</td><td>对 ArrayList 中的元素进行排序。</td></tr><tr><td>public virtual void TrimToSize();</td><td>设置容量为 ArrayList 中元素的实际个数。</td></tr><tr><td></td><td></td></tr><tr><td>演示：</td><td></td></tr></tbody></table><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">namespace</span> CollectionApplication<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ArrayList al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Adding some numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Capacity: {0} "</span><span class="token punctuation">,</span> al<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}"</span><span class="token punctuation">,</span> al<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token keyword">in</span> al<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Sorted Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token keyword">in</span> al<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：  </p><pre class=" language-csharp"><code class="language-csharp">Adding some numbers<span class="token punctuation">:</span>Capacity<span class="token punctuation">:</span> <span class="token number">8</span>Count<span class="token punctuation">:</span> <span class="token number">7</span>Content<span class="token punctuation">:</span> <span class="token number">45</span> <span class="token number">78</span> <span class="token number">33</span> <span class="token number">56</span> <span class="token number">12</span> <span class="token number">23</span> <span class="token number">9</span>Content<span class="token punctuation">:</span> <span class="token number">9</span> <span class="token number">12</span> <span class="token number">23</span> <span class="token number">33</span> <span class="token number">45</span> <span class="token number">56</span> <span class="token number">78</span>    </code></pre><h2 id="哈希表-Hashtable"><a href="#哈希表-Hashtable" class="headerlink" title="哈希表-Hashtable"></a><font color=#FF69B4>哈希表-Hashtable</font></h2><p>它使用键来访问集合中的元素。<br>当您使用键访问元素时，则使用哈希表，而且您可以识别一个有用的键值。哈希表中的每一项都有一个键/值对。键用于访问集合中的项目。    </p><p><font color=#00ffff>Hashtable的一些属性:</font> </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Count</td><td>获取 Hashtable 中包含的键值对个数。</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示 Hashtable 是否具有固定大小。</td></tr><tr><td>IsReadOnly</td><td>获取一个值，表示 Hashtable 是否只读</td></tr><tr><td>Item</td><td>获取或设置与指定的键相关的值。</td></tr><tr><td>Keys</td><td>获取一个 ICollection，包含 Hashtable 中的键。</td></tr><tr><td>Values</td><td>获取一个 ICollection，包含 Hashtable 中的值。</td></tr></tbody></table><p><font color=#00ffff>Hashtable的一些方法:</font> </p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual void Add( object key, object value );</td><td>向 Hashtable 添加一个带有指定的键和值的元素。</td></tr><tr><td>public virtual void Clear();</td><td>从 Hashtable 中移除所有的元素。</td></tr><tr><td>public virtual bool ContainsKey( object key );</td><td>判断 Hashtable 是否包含指定的键。</td></tr><tr><td>public virtual bool ContainsValue( object value );</td><td>判断 Hashtable 是否包含指定的值。</td></tr><tr><td>public virtual void Remove( object key );</td><td>从 Hashtable 中移除带有指定的键的元素</td></tr></tbody></table><p>演示：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">namespace</span> CollectionsApplication<span class="token punctuation">{</span>   <span class="token keyword">class</span> <span class="token class-name">Program</span>   <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         Hashtable ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"Abida Rehman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"Joe Holzner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"Mausam Benazir Nur"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"M. Amlan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"M. Arif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"007"</span><span class="token punctuation">,</span> <span class="token string">"Ritesh Saikia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This student name is already in the list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>            ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"008"</span><span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 获取键的集合</span>         ICollection key <span class="token operator">=</span> ht<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> k <span class="token keyword">in</span> key<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token number">007</span><span class="token punctuation">:</span> Ritesh Saikia<span class="token number">004</span><span class="token punctuation">:</span> Mausam Benazir Nur<span class="token number">005</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span> Amlan<span class="token number">008</span><span class="token punctuation">:</span> Nuha Ali<span class="token number">002</span><span class="token punctuation">:</span> Abida Rehman<span class="token number">003</span><span class="token punctuation">:</span> Joe Holzner<span class="token number">001</span><span class="token punctuation">:</span> Zara Ali<span class="token number">006</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span> Arif</code></pre><h2 id="排序列表-SortedList"><a href="#排序列表-SortedList" class="headerlink" title="排序列表-SortedList"></a><font color=#FF69B4>排序列表-SortedList</font></h2><p>……..  </p><h1 id="List-用法总结"><a href="#List-用法总结" class="headerlink" title="List 用法总结"></a><font color=#FF69B4>List 用法总结</font></h1><p>列表可以存储任何类型的数据，在创建列表对象的时候首先要指定你要创建的这个列表要存储什么类型的  </p><ol><li>创建列表  </li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//创建列表</span><span class="token comment" spellcheck="true">//方法一</span>List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个空的列表 通过类型后面的&lt;>来表示这个列表存储的数据的类型</span><span class="token comment" spellcheck="true">//方法二</span><span class="token keyword">var</span> intlist1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法三</span> <span class="token keyword">var</span> intlist2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个列表，里面的初始值有三个分别为 1 2 3</span></code></pre><ol start="2"><li><p>遍历列表  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环体list[i]</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//依次取得list中的每一个元素赋值给temp，并执行循环体</span> <span class="token comment" spellcheck="true">//循环体 temp</span><span class="token punctuation">}</span></code></pre></li><li><p>列表的常用属性方法  </p></li></ol><table><thead><tr><th>方法或者属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity属性</td><td>获取容量大小</td></tr><tr><td>Add()</td><td>方法添加元素</td></tr><tr><td>Insert()</td><td>插入元素</td></tr><tr><td>Count属性</td><td>访问元素个数</td></tr><tr><td>RemoveAt()</td><td>移除指定位置的元素</td></tr><tr><td>IndexOf()</td><td>取得一个元素所在列表中的索引位置</td></tr><tr><td>LastIndexOf()</td><td>上面的方法是从前往后搜索，这个是从后往前搜索，搜索到满足条件的就停止,上面的两个方法，如果没有找到指定元素就返回-1</td></tr><tr><td>Sort()</td><td>对列表中是元素进行从小到大排序</td></tr></tbody></table><p>演示：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scoreList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向指定索引位置插入元素，原来的元素向后移动一位。插入索引不能超出索引范围，插入索引最大可为scoreList.Count</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scoreList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//removeAt（index）填入要删除的索引.</span><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查找不到返回<span class="token operator">-</span><span class="token number">1</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;集合（Collection）类是专门用于数据存储和检索的类。这些类提供了对栈（stack）、队列（queue）、列表（list）和哈希表（hash table）的支持。大多数集合类实现了相同的接口。  &lt;/p&gt;
&lt;p&gt;集合（Collection）类服务于不同的目的，如为元素</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#-字符串</title>
    <link href="http://easyy1108.github.io/2021/032338653.html"/>
    <id>http://easyy1108.github.io/2021/032338653.html</id>
    <published>2021-03-23T13:10:40.000Z</published>
    <updated>2021-03-25T15:02:23.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用字符串操作"><a href="#常用字符串操作" class="headerlink" title="常用字符串操作"></a>常用字符串操作</h1><ol><li><p><font color =#00ffff>变量.Length：取字符串长度:</font><br>如:  </p><pre class=" language-csharp"><code class="language-csharp">String  str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>  Int len<span class="token operator">=</span>str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Len是自定义变量，str是字符串的变量名  </span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>   </code></pre><p>输出结果：5  </p></li><li><p><font color =#00ffff>变量.Substring(参数1,参数2):</font><br>截取字串的一部分，参数1为左起始位数，参数2为截取几位。<br>如:  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span>  str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}"</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：el  </p></li><li><p><font color =#00ffff>char.IsWh iteSpace(字符串变量，位数)</font><br>查指定位置是否空字符  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str<span class="token operator">=</span><span class="token string">"he llo"</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsWhiteSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>输出结果：True  </p></li><li><p><font color =#00ffff>char.IsPunctuation(‘字符’)</font><br>查字符是否是标点符号  </p><pre class=" language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsPunctuation</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsPunctuation</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：False  True  </p></li><li><p><font color =#00ffff>Trim() :</font><br>清除字串前后空格<br>```csharp<br>string str=”  hello  ”;</p></li></ol><p>Console.WriteLine(“{0}”,str.Trim());</p><pre><code>输出结果：hello  6. &lt;font color =#00ffff&gt;变量.Replace(“要替换的”,”替换为”)&lt;/font&gt;  字符串替换  ```csharp  string str=”helle”;Console.WriteLine(“&#123;0&#125;”,str.Replace(“e”,”o”));</code></pre><p>输出结果：hello<br>7. <font color =#00ffff>Split()</font><br>将字符串拆分为子字符串(如将句子拆分为各个单词)<br>Split() 方法使用分隔符（如空格字符）  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> delimit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">' '</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">string</span> s14 <span class="token operator">=</span> <span class="token string">"The cat sat on the mat."</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> substr <span class="token keyword">in</span> s14<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>delimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><p>The</p><p>cat</p><p>sat</p><p>on</p><p>the</p><p>mat.<br>8. <font color =#00ffff>ToUpper() 和 ToLower()：</font><br>更改大小写字母  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：HELLO<br>9. <font color =#00ffff>IndexOf() 、LastIndexOf() </font><br>查找字串中指定字符或字串首次（最后一次）出现的位置,返回索引值.  </p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">string</span> str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//查找“e”在str中的索引值（位置） </span><span class="token comment" spellcheck="true">//结果为：1</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//查找“el”的第一个字符在str中的索引值（位置） </span><span class="token comment" spellcheck="true">//结果为：2</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"字串"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//从str1第4个字符起，查找2个字符，查找“字串”的第一个字符在str1中的索引值（位置）</span>tring str<span class="token operator">=</span>”hellogood”<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>“og”<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：-1</span></code></pre><ol start="10"><li><p><font color =#00ffff>str1.EndsWith(str2)</font><br>检测字串str1是否以字串str2结尾,返回布尔值.  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str1 <span class="token operator">=</span> <span class="token string">"hi,hello"</span><span class="token punctuation">;</span><span class="token keyword">string</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>"<span class="token punctuation">.</span>EndsWith的用法”<span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：True  </span></code></pre></li><li><p> <font color =#00ffff>str1.Equals(str2)</font><br>检测字串str1是否与字串str2相等,返回布尔值  </p></li><li><p><font color =#00ffff>Insert()</font><br>在字串中指定索引位插入指定字符。  </p></li><li><p><font color =#00ffff>Remove():</font><br>从指定位置删除指定位数的字符</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用字符串操作&quot;&gt;&lt;a href=&quot;#常用字符串操作&quot; class=&quot;headerlink&quot; title=&quot;常用字符串操作&quot;&gt;&lt;/a&gt;常用字符串操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;font color =#00ffff&gt;变量.Length：取字符串长度:&lt;/f</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://easyy1108.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>C#-数组</title>
    <link href="http://easyy1108.github.io/2021/032317252.html"/>
    <id>http://easyy1108.github.io/2021/032317252.html</id>
    <published>2021-03-23T12:52:24.000Z</published>
    <updated>2021-03-25T08:13:13.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><font color =#00ffff>声明数组：</font><br>采用以下方式声明数组  <pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>TypeNmae<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//例如</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>这种数组又叫做矩形数组，其每一行的元素个数都相同。</p><ol><li><font color =#00ffff>数组声明：</font>  <pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//二维</span><span class="token operator">&lt;</span>baseType<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多维只需要加，</span><span class="token operator">&lt;</span>baseType<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> array <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h1 id="数组的数组"><a href="#数组的数组" class="headerlink" title="数组的数组"></a>数组的数组</h1>这种数组又叫锯齿数组，其每行的元素个数可能不同。  </li><li>声明格式：  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jaggedIntArray<span class="token punctuation">;</span></code></pre></li><li>初始化：<br>这种数组的初始化不能像上面的数组一样，例如<font color=#ff0000>不能</font>采用：  <pre class=" language-csharp"><code class="language-csharp">jaggedIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>即使可以这样做，也不是很有效，因为这样完全可以用多维数组代替，也<font color=#ff0000>不能</font>使用下面的代码：  <pre class=" language-csharp"><code class="language-csharp">jaggedIntArray<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>那么要怎么样声明呢？如下：<br>```csharp<br>jaggedIntArray =new int [2][];<br>jaggedIntArray[0] =new int[3];<br>jaggedIntArray[1]=new int[4];</li></ol><p>//也可以使用：<br>int [][] jaggedIntArray =new {new int[]{1,2,3},new int[]{1},new int[] {1,2,}};</p><pre><code>   </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;font color =#00ffff&gt;声明数组：&lt;/font&gt;&lt;br&gt;采用以下方式声明数组  &lt;pre class=&quot; la</summary>
      
    
    
    
    
    <category term="数组" scheme="http://easyy1108.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2D项目总结（持续更新中）</title>
    <link href="http://easyy1108.github.io/2021/032341153.html"/>
    <id>http://easyy1108.github.io/2021/032341153.html</id>
    <published>2021-03-23T12:31:22.000Z</published>
    <updated>2021-03-23T13:27:35.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BommGuy-项目总结"><a href="#BommGuy-项目总结" class="headerlink" title="BommGuy 项目总结"></a>BommGuy 项目总结</h1><p>前言；转眼之间就要到了毕业找工作的时候，在此，把大学期间做过的一些小Demo重新看一看，总结一下。  </p><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>这个Demo 是Unity官方推送的Michael老师的2d教程，正好当时打算玩玩Unity的2D方向，就参考着进行制作。<br>游戏素材源自“pixelfrog”：<br><img src="https://i.loli.net/2021/03/23/jKUru5AbdxyzZwa.png" alt="游戏素材"><br>为了征求许可，还特地去Twitter上找到他，进行了询问。<br>游戏共有6个角色，每个角色都配备了攻击、跑、死亡、初始等序列帧动画。<br><img src="https://i.loli.net/2021/03/23/2boCPshMLvn9Hfy.png" alt="游戏素材导入Unity">  </p><h2 id="素材处理"><a href="#素材处理" class="headerlink" title="素材处理"></a>素材处理</h2><p>由于这些素材的分辨率不统一，所以得先进行处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BommGuy-项目总结&quot;&gt;&lt;a href=&quot;#BommGuy-项目总结&quot; class=&quot;headerlink&quot; title=&quot;BommGuy 项目总结&quot;&gt;&lt;/a&gt;BommGuy 项目总结&lt;/h1&gt;&lt;p&gt;前言；转眼之间就要到了毕业找工作的时候，在此，把大学期间做过</summary>
      
    
    
    
    
    <category term="Demo" scheme="http://easyy1108.github.io/tags/Demo/"/>
    
    <category term="项目总结" scheme="http://easyy1108.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://easyy1108.github.io/2021/032253518.html"/>
    <id>http://easyy1108.github.io/2021/032253518.html</id>
    <published>2021-03-22T11:34:49.000Z</published>
    <updated>2021-03-24T14:54:08.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><p> </p><p>示例 1：<br>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。  </p><p>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：  </p><p>输入：nums = [3,3], target = 6<br>输出：[0,1] </p><p>提示：</p><p>2 &lt;= nums.length &lt;= 103<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案  </p><h2 id="暴力法实现"><a href="#暴力法实现" class="headerlink" title="暴力法实现"></a>暴力法实现</h2><p>C语言实现：  </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>               ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>               ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>               <span class="token keyword">return</span> ret<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>C#实现：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h2><p>C语言实现：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> hashTable <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> hashTable<span class="token operator">*</span> hashtable<span class="token punctuation">;</span><span class="token keyword">struct</span> hashTable<span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> ikey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ikey<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> ikey<span class="token punctuation">,</span> <span class="token keyword">int</span> ival<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>ikey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> hashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>key <span class="token operator">=</span> ikey<span class="token punctuation">,</span> tmp<span class="token operator">-></span>val <span class="token operator">=</span> ival<span class="token punctuation">;</span>        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        it<span class="token operator">-></span>val <span class="token operator">=</span> ival<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hashtable <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token operator">-></span>val<span class="token punctuation">,</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>C#实现:  </p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义一个int，int 类型的哈希表</span>            Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> myDic <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一个不用判断，因为表里没值</span>            myDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断target-nums[i]是否在哈希表里，在的话就说明找到了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>myDic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>myDic<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>                myDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span></code></pre><h2 id="附C-Hash表的相关信息"><a href="#附C-Hash表的相关信息" class="headerlink" title="附C# Hash表的相关信息"></a>附C# Hash表的相关信息</h2><p>在 C# 中，官方的哈希表实现为 Dictionary<br><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.hashtable?f1url=https://msdn.microsoft.com/query/dev16.query?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Collections.Hashtable);k(DevLang-csharp)&rd=true&view=netframework-4.8">官方文档</a><br><a href="https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md">Github</a><br>题目出处及其他解法： <a href="https://leetcode-cn.com/problems/two-sum/">LeetCode</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数</summary>
      
    
    
    
    
    <category term="算法" scheme="http://easyy1108.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="http://easyy1108.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="哈希表" scheme="http://easyy1108.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Unity-第一人称人物控制</title>
    <link href="http://easyy1108.github.io/2021/032032643.html"/>
    <id>http://easyy1108.github.io/2021/032032643.html</id>
    <published>2021-03-20T10:04:51.000Z</published>
    <updated>2021-03-24T14:54:39.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一人称的移动、跳跃控制"><a href="#第一人称的移动、跳跃控制" class="headerlink" title="第一人称的移动、跳跃控制"></a>第一人称的移动、跳跃控制</h1><ol><li><p>新建一个Capsule<br><img src="https://i.loli.net/2021/03/20/s5tkxMpFfwNWnGh.png"></p></li><li><p>为其添加CharacterContronller 组件<br><img src="https://i.loli.net/2021/03/20/eOAbyvwS67FRfI1.png"></p></li><li><p>将相机移动为Capsule子物体并移动到上方<br><img src="https://i.loli.net/2021/03/20/vfX5h6b8Y7QeKAm.png"></p></li><li><p>位相机添加MouseContronller 脚本</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseController</span> <span class="token punctuation">:</span> MonoBehaviour<span class="token punctuation">{</span> <span class="token keyword">public</span> Transform player <span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">float</span> mouseSpeed <span class="token operator">=</span><span class="token number">100f</span><span class="token punctuation">;</span> <span class="token keyword">float</span> xRotation<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">float</span> mouseX <span class="token operator">=</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse X"</span><span class="token punctuation">)</span> <span class="token operator">*</span> mouseSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>     <span class="token keyword">float</span> mouseY <span class="token operator">=</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse Y"</span><span class="token punctuation">)</span> <span class="token operator">*</span> mouseSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime <span class="token punctuation">;</span>     xRotation <span class="token operator">-</span><span class="token operator">=</span> mouseY<span class="token punctuation">;</span>     xRotation <span class="token operator">=</span>Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>xRotation<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span><span class="token number">90f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     tranform<span class="token punctuation">.</span>LocalRotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span>xRotation<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     player<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>up<span class="token operator">*</span>mouseX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2021/03/20/Gi8OlkIATPYsUnH.png" alt="控制上下左右旋转代码">  </p></li><li><p>为人物添加PlayerController 代码  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> MonoBehaviour<span class="token punctuation">{</span> <span class="token keyword">public</span> CharacterController controller<span class="token punctuation">;</span> <span class="token keyword">public</span> Transform checkPoint<span class="token punctuation">;</span> <span class="token keyword">public</span> LayerMask ground<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> radius<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> speed <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> gravity <span class="token operator">=</span><span class="token operator">-</span><span class="token number">9.81f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> jumpHeight <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> Vector3 velocity<span class="token punctuation">;</span> <span class="token keyword">bool</span> isGround<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     isGround <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">CheckSphere</span><span class="token punctuation">(</span>checkPoint <span class="token punctuation">,</span> radius <span class="token punctuation">,</span>ground<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>isGround <span class="token operator">&amp;&amp;</span> velocity<span class="token punctuation">.</span>y<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         velocity<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1f</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">float</span> x <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">float</span> z <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Vetical"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Vector3 move <span class="token operator">=</span> tranform<span class="token punctuation">.</span>rigth<span class="token operator">*</span>x <span class="token operator">+</span> tranform<span class="token punctuation">.</span>forward <span class="token operator">*</span> z<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>isGround <span class="token operator">&amp;&amp;</span> Input<span class="token punctuation">.</span><span class="token function">GetButtonDwon</span><span class="token punctuation">(</span><span class="token string">"Jump"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>jumpHeight<span class="token operator">*</span><span class="token operator">-</span><span class="token number">3.0f</span> <span class="token operator">*</span> gravity<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     controller<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>move<span class="token operator">*</span> speed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     velocity<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> gravity<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>     controller<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>velocity<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2021/03/20/g2oNOcEVZLj5X6J.png" alt="人物移动及掉落代码">    </p></li></ol><p>CharacterController.Move() 参考：<a href="https://docs.unity3d.com/cn/2019.4/ScriptReference/CharacterController.Move.html">Unity官方手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一人称的移动、跳跃控制&quot;&gt;&lt;a href=&quot;#第一人称的移动、跳跃控制&quot; class=&quot;headerlink&quot; title=&quot;第一人称的移动、跳跃控制&quot;&gt;&lt;/a&gt;第一人称的移动、跳跃控制&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;新建一个Capsule&lt;br&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="Unity" scheme="http://easyy1108.github.io/tags/Unity/"/>
    
    <category term="人物控制" scheme="http://easyy1108.github.io/tags/%E4%BA%BA%E7%89%A9%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-接口</title>
    <link href="http://easyy1108.github.io/2021/032025834.html"/>
    <id>http://easyy1108.github.io/2021/032025834.html</id>
    <published>2021-03-20T02:19:17.000Z</published>
    <updated>2021-03-24T14:55:42.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是把公共实例（非静态）方法和属性组合起来，以封装特定功能的一个集合。<br><font color =#00ffff>接口不能单独存在，不能像实例化一个类那样实例化接口。另外，接口不能包含实现其成员的任何代码，只能定义成员本身。实现的过程需要在实现接口的类中完成。</font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> Interface <span class="token class-name">IKillable</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Interface <span class="token class-name">IDamageable</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Damage</span><span class="token punctuation">(</span>T damageTaken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Avatar</span> <span class="token punctuation">:</span> MonoBehaviour <span class="token punctuation">,</span>IKillable<span class="token punctuation">,</span>IDamageable<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: do something</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Damage</span><span class="token punctuation">(</span><span class="token keyword">float</span> damage<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;接口是把公共实例（非静态）方法和属性组合起来，以封装特定功能的一个集合。&lt;br&gt;&lt;font color =#00ffff&gt;接口不能单独存在，</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-重写</title>
    <link href="http://easyy1108.github.io/2021/032031161.html"/>
    <id>http://easyy1108.github.io/2021/032031161.html</id>
    <published>2021-03-20T02:05:37.000Z</published>
    <updated>2021-03-24T14:56:00.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a>Overriding</h1><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Humanoid</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//叫</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span> <span class="token punctuation">:</span> Humanoid<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span>Yell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//叫</span>        <span class="token comment" spellcheck="true">//跑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Silme</span> <span class="token punctuation">:</span> Enemy<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//叫 跑</span>        <span class="token comment" spellcheck="true">//攻击</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Overriding&quot;&gt;&lt;a href=&quot;#Overriding&quot; class=&quot;headerlink&quot; title=&quot;Overriding&quot;&gt;&lt;/a&gt;Overriding&lt;/h1&gt;&lt;pre class=&quot; language-csharp&quot;&gt;&lt;code class</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-成员隐藏</title>
    <link href="http://easyy1108.github.io/2021/032025519.html"/>
    <id>http://easyy1108.github.io/2021/032025519.html</id>
    <published>2021-03-20T01:57:28.000Z</published>
    <updated>2021-03-24T14:56:30.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成员隐藏"><a href="#成员隐藏" class="headerlink" title="成员隐藏"></a>成员隐藏</h1><p>通过继承，父类的成员在子类中自动可用，或者继承到子类中。<br>在子类中重新创建即重新声明父类成员的过程叫做成员隐藏。<br>隐藏成员同样通过new关键字实现，不过方式略有不同。  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Humanoid</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//叫</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span> <span class="token punctuation">:</span> Humanoid<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//跑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Silme</span> <span class="token punctuation">:</span> Enemy<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//攻击</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;成员隐藏&quot;&gt;&lt;a href=&quot;#成员隐藏&quot; class=&quot;headerlink&quot; title=&quot;成员隐藏&quot;&gt;&lt;/a&gt;成员隐藏&lt;/h1&gt;&lt;p&gt;通过继承，父类的成员在子类中自动可用，或者继承到子类中。&lt;br&gt;在子类中重新创建即重新声明父类成员的过程叫做成员隐藏。&lt;br</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-多态</title>
    <link href="http://easyy1108.github.io/2021/032027786.html"/>
    <id>http://easyy1108.github.io/2021/032027786.html</id>
    <published>2021-03-20T01:19:57.000Z</published>
    <updated>2021-03-24T14:56:23.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态可以把某个派生类型的变量赋值给基本类型的变量。<br>假如现在有Animal类，Animal中有EatFood()方法<br>然后Cow类中也有EatFood()和Moo()方法<br>现在Cow继承自Animal，那么可以不用强制转换就可以通过这个变量来调用基类的方法。：<br>Animal myAnimal = new Cow();<br>myAnimal.EatFood();<br>结果就是调用派生类型中的EatFood()的实现代码。但是，不能以相同的方式来调用派生类型上定义的方法，例如:<br>myAnimal.Moo();<br>则无法运行。<br>但是可以把基本类型的变量转换为派生类型变量，调用派生类的方法，例如:<br>Cow myNewCow =(Cow) myAnimal;<br>myNewCow.Moo(); </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h1&gt;&lt;p&gt;多态可以把某个派生类型的变量赋值给基本类型的变量。&lt;br&gt;假如现在有Animal类，Animal中有EatFood()方法&lt;br&gt;然后Cow</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-继承</title>
    <link href="http://easyy1108.github.io/2021/031824724.html"/>
    <id>http://easyy1108.github.io/2021/031824724.html</id>
    <published>2021-03-18T12:37:54.000Z</published>
    <updated>2021-03-24T14:55:50.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>当一个类继承一个类时，他会获得被继承类的特征<br>被继承类又叫做 父类 or 基类<br>继承类又叫做 子类 or 派生类<br>在继承时，需要注意父类的访问修饰符  </p><ol><li><font color =#00ffff> public</font><br>存在于子类中且可以被父类、子类、其他类访问  </li><li><font color =#00ffff>protected </font><br>存在于子类且可以被访问，但是在父类或子类以外不可以被访问  </li><li><font color=#00ffff>private </font><br>存在于子类，但是不可以被访问  </li></ol><p>在子类继承的项中，构造函数是个例外，因为构造函数对类是唯一的，不会共享。但是在子类调用构造函数时，欺父类的构造函数会被立即调用，由于类可能有多个不同的构造函数，因此我们可能想要控制调用哪个基类构造函数，为此可以使用关键字：<font color =#00ffff>base </font> 通过在子类构造函数的参数列表后面加一个 : baxe(“xxx”)<br>如果不显式调用基类的构造函数，则会隐式调用默认的构造函数<br>base 还可以用来访问基类的其他成员，例如重写。</p><p>在unity中，所有类都是默认继承自MonoBehaviour 类  </p><h2 id="MonoBehaviour"><a href="#MonoBehaviour" class="headerlink" title="MonoBehaviour"></a>MonoBehaviour</h2><h2 id="MonoBehaviour-九大生命周期"><a href="#MonoBehaviour-九大生命周期" class="headerlink" title="MonoBehaviour 九大生命周期"></a>MonoBehaviour 九大生命周期</h2><ol><li><font color =#00ffff>Awake()</font><br>在加载场景时运行 , 即在游戏开始之前初始化变量或者游戏状态 . 只执行一次</li><li><font color =#00ffff>OnEnable()</font><br>在激活当前脚本时调用 , 每激活一次就调用一次该方法</li><li><font color =#00ffff>Start()</font><br>在第一次启动时执行 , 用于游戏对象的初始化 , 在Awake 函数之后执行,只执行一次</li><li><font color =#00ffff>FixUpdate()</font><br>固定频率调用 , 与硬件无关, 可以在 Edit -&gt; Project Setting -&gt; Time -&gt; Fixed Time Step 修改</li><li><font color =#00ffff>Update()</font><br>几乎每一帧都在调用 , 取决于你的电脑硬件 , 不稳定</li><li><font color =#00ffff>LateUpdate()</font><br>在Update函数之后调用 , 一般用作摄像机跟随</li><li><font color =#00ffff>OnGUI()</font><br>调用速度是上面的两倍 , 一般用于老版本的额 GUI 显示</li><li><font color =#00ffff>Ondisable()</font><br>和 OnEnable 函数成对出现 , 只要从激活状态变为取消激活状态 , 就会执行一次 (和 OnEnable互斥)</li><li> <font color =#00ffff>OnDestroy()</font><br>当前游戏对象或游戏组件被销毁时执行</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;p&gt;当一个类继承一个类时，他会获得被继承类的特征&lt;br&gt;被继承类又叫做 父类 or 基类&lt;br&gt;继承类又叫做 子类 or 派生类&lt;br&gt;在继承时</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
    <category term="MonoBehaviour" scheme="http://easyy1108.github.io/tags/MonoBehaviour/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-三元运算符</title>
    <link href="http://easyy1108.github.io/2021/031839328.html"/>
    <id>http://easyy1108.github.io/2021/031839328.html</id>
    <published>2021-03-18T12:28:17.000Z</published>
    <updated>2021-03-24T14:55:34.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>三元运算符是 if else 的另一种写法，在某些情况下，比if-else 更加简洁。<br>具体写法如下：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>    max<span class="token operator">=</span>  a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token punctuation">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的意思是 a&gt;b的话，max=a，否则max=b</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三元运算符&quot;&gt;&lt;a href=&quot;#三元运算符&quot; class=&quot;headerlink&quot; title=&quot;三元运算符&quot;&gt;&lt;/a&gt;三元运算符&lt;/h1&gt;&lt;p&gt;三元运算符是 if else 的另一种写法，在某些情况下，比if-else 更加简洁。&lt;br&gt;具体写法如下：  &lt;/</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-泛型</title>
    <link href="http://easyy1108.github.io/2021/03181926.html"/>
    <id>http://easyy1108.github.io/2021/03181926.html</id>
    <published>2021-03-18T11:44:55.000Z</published>
    <updated>2021-03-24T14:56:19.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型是一个特征，通过该特征，类型可以作为参数传递给类或者方法。像Unity中的GetComponent就是泛型方法。  </p><h2 id="如何创建泛型"><a href="#如何创建泛型" class="headerlink" title="如何创建泛型"></a>如何创建泛型</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> param<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>无论T是什么类型，传入什么类型，T就对应成这个类型。  </p><h2 id="限制泛型"><a href="#限制泛型" class="headerlink" title="限制泛型"></a>限制泛型</h2><ol><li>T是引用类型<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T ：<span class="token keyword">class</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>T是值类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">struct</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>不含参数的公共构造函数  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>class name 限制为具体某个类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T<span class="token punctuation">:</span> Transform <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>Interfaces 接口类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span>IEnumerable <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;p&gt;泛型是一个特征，通过该特征，类型可以作为参数传递给类或者方法。像Unity中的GetComponent就是泛型方法。  &lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-方法重载</title>
    <link href="http://easyy1108.github.io/2021/03189249.html"/>
    <id>http://easyy1108.github.io/2021/03189249.html</id>
    <published>2021-03-18T11:24:58.000Z</published>
    <updated>2021-03-24T14:56:51.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathAdd</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">string</span> a<span class="token punctuation">,</span> <span class="token keyword">string</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如上，我们需要实现一个俩个整数相加的方法，然后现在又需要实现 俩个字符串相加，那么是不是需要再写个string AddString()的方法呢?<br>这里就可以使用  方法重载  方法名相同，参数不同。这时，当我们在使用的时候会出现是三种情况：  </p><ol><li>输入的参数完全匹配–&gt;运行完全匹配的重载方法 。 </li><li>输入的参数不完全匹配–&gt;系统将查看所有的可能匹配项，并选择一个需要最少转换量的版本。</li><li>如果没有匹配项或者匹配项的多个版本所需转换量相同–&gt; Error!</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方法重载&quot;&gt;&lt;a href=&quot;#方法重载&quot; class=&quot;headerlink&quot; title=&quot;方法重载&quot;&gt;&lt;/a&gt;方法重载&lt;/h1&gt;&lt;pre class=&quot; language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-static</title>
    <link href="http://easyy1108.github.io/2021/031838921.html"/>
    <id>http://easyy1108.github.io/2021/031838921.html</id>
    <published>2021-03-18T10:49:33.000Z</published>
    <updated>2021-03-24T14:56:36.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h1><p>静态成员，如变量和方法，是跨越类的所有实例共享的成员。  静态成员，可以通过类直接访问，而无需类的实例。 </p><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>静态变量在类的每个对象中具有相同的值，也是说只要在一个地方修改了这个变量，其他地方的静态变量也会随之改变。例如：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Enemy enemy1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enemy enemy2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enemy enemy3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> Enemy<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时count = 3  </p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法属于类，而不属于类的实例，所以不需要通过类的实例来访问。 </p><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>静态类的创建需要在 class 前加 static关键字，静态类不能继承不能实例化，且静态类中的方法、变量也需要是静态的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;static-静态&quot;&gt;&lt;a href=&quot;#static-静态&quot; class=&quot;headerlink&quot; title=&quot;static 静态&quot;&gt;&lt;/a&gt;static 静态&lt;/h1&gt;&lt;p&gt;静态成员，如变量和方法，是跨越类的所有实例共享的成员。  静态成员，可以通过类直接访</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-属性</title>
    <link href="http://easyy1108.github.io/2021/031817671.html"/>
    <id>http://easyy1108.github.io/2021/031817671.html</id>
    <published>2021-03-18T10:20:41.000Z</published>
    <updated>2021-03-24T14:55:29.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>我们经常需要在A类中访问B类的成员变量，通常我们会将B类的成员变量设置为public，但是还有更好的方法，那就是使用属性（字段）。  </p><h2 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> experience<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装属性，一般与字段同名，首字母大写</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Experience    <span class="token punctuation">{</span>        <span class="token keyword">get</span>｛<span class="token keyword">return</span> experience<span class="token punctuation">;</span>｝        <span class="token keyword">set</span>｛experience <span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">;</span>｝    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    Player player <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    player<span class="token punctuation">.</span>Experience<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> currentEx<span class="token operator">=</span>player<span class="token punctuation">.</span>Experience<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然 experience 在player类中是私有的，但是通过set 和get 可以访问这个属性。  </p><p>还可以通过get 和 set 来限制只读、只写、可写可读。  </p><p><font color = #00ffff>另外一种写法：  </font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> Level<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在vs中可以通过输入 “prpo” 加回车 快速生存</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;p&gt;我们经常需要在A类中访问B类的成员变量，通常我们会将B类的成员变量设置为public，但是还有更好的方法，那就是使用属性（字段）。  &lt;/p</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#中级-Extension Methods</title>
    <link href="http://easyy1108.github.io/2021/031852531.html"/>
    <id>http://easyy1108.github.io/2021/031852531.html</id>
    <published>2021-03-18T09:46:38.000Z</published>
    <updated>2021-03-24T14:50:40.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Extension-Methods"><a href="#Extension-Methods" class="headerlink" title="Extension Methods"></a>Extension Methods</h1><p>通过扩展方法可以向类中添加方法，而不用创建DirveType 或者更改原始类型。<br>例如Unity的transform类，假如现在我们需要一个方法来重置物体位置，这个方法最合适写在Transform类中，但是这个类不允许我们修改，当然把它作为派生类也没有意义，这时就可以用扩展方法来向Transform类中加入这个方法。  </p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p><font color =#00ffff>扩展方法需要写成静态的，而仅仅加 static 关键字 ，那么这个类就是静态类了，所以需要使用this关键字。</font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">ExtensionTools</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//this 后面跟扩展的类型，这里是Transform类型，如果还有其他参数可以写在后面  </span>    <span class="token comment" spellcheck="true">//但是第一参数一定是 this + 扩展的类型 + 变量名</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ResetTransfoem</span><span class="token punctuation">(</span><span class="token keyword">this</span> Transform transform<span class="token punctuation">)</span><span class="token punctuation">{</span>        transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>        transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">;</span>        transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><p>使用这个方法只需要把它看成类的成员  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> Monobehaviour<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        transform<span class="token punctuation">.</span><span class="token function">ResetTransfoem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Extension-Methods&quot;&gt;&lt;a href=&quot;#Extension-Methods&quot; class=&quot;headerlink&quot; title=&quot;Extension Methods&quot;&gt;&lt;/a&gt;Extension Methods&lt;/h1&gt;&lt;p&gt;通过扩展方法可以向类</summary>
      
    
    
    
    
    <category term="C#" scheme="http://easyy1108.github.io/tags/C/"/>
    
  </entry>
  
</feed>
