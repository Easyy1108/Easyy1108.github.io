<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#常用函数记录</title>
      <link href="2021/032518886.html"/>
      <url>2021/032518886.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#-集合</title>
      <link href="2021/032349341.html"/>
      <url>2021/032349341.html</url>
      
        <content type="html"><![CDATA[<p>集合（Collection）类是专门用于数据存储和检索的类。这些类提供了对栈（stack）、队列（queue）、列表（list）和哈希表（hash table）的支持。大多数集合类实现了相同的接口。  </p><p>集合（Collection）类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建 Object 类的对象的集合。在 C# 中，Object 类是所有数据类型的基类。<br>下面是各种常用的 System.Collection 命名空间的类:  </p><h2 id="动态数组-ArrayList"><a href="#动态数组-ArrayList" class="headerlink" title="动态数组-ArrayList"></a><font color=#FF69B4>动态数组-ArrayList</font></h2><p>它代表了可被单独索引的对象的有序集合。<br>它基本上可以替代一个数组。但是，与数组不同的是，您可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。<br><font color=#00ffff>ArrayList的一些属性:</font>  </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity</td><td>获取或设置 ArrayList 可以包含的元素个数。</td></tr><tr><td>Count</td><td>获取 ArrayList 中实际包含的元素个数。</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示 ArrayList 是否具有固定大小。</td></tr><tr><td>IsReadOnly</td><td>获取一个值，表示 ArrayList 是否只读。</td></tr><tr><td>IsSynchronized</td><td>获取一个值，表示访问 ArrayList 是否同步（线程安全）。</td></tr><tr><td>Item[Int32]</td><td>获取或设置指定索引处的元素。</td></tr><tr><td>SyncRoot</td><td>获取一个对象用于同步访问 ArrayList。</td></tr></tbody></table><p><font color=#00ffff>ArrayList类的一些常用方法：</font>  </p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual int Add( object value );</td><td>在 ArrayList 的末尾添加一个对象。</td></tr><tr><td>public virtual void AddRange( ICollection c );</td><td>在 ArrayList 的末尾添加 ICollection 的元素。</td></tr><tr><td>public virtual void Clear();</td><td>从 ArrayList 中移除所有的元素。</td></tr><tr><td>public virtual bool Contains( object item );</td><td>判断某个元素是否在 ArrayList 中。</td></tr><tr><td>public virtual ArrayList GetRange( int index, int count );</td><td>返回一个 ArrayList，表示源 ArrayList 中元素的子集</td></tr><tr><td>public virtual int IndexOf(object);</td><td>返回某个值在 ArrayList 中第一次出现的索引，索引从零开始。</td></tr><tr><td>public virtual void Insert( int index, object value );</td><td>在 ArrayList 的指定索引处，插入一个元素。</td></tr><tr><td>public virtual void InsertRange( int index, ICollection c );</td><td>在 ArrayList 的指定索引处，插入某个集合的元素。</td></tr><tr><td>public virtual void Remove( object obj );</td><td>从 ArrayList 中移除第一次出现的指定对象。</td></tr><tr><td>public virtual void RemoveAt( int index );</td><td>移除 ArrayList 的指定索引处的元素。</td></tr><tr><td>public virtual void RemoveRange( int index, int count );</td><td>从 ArrayList 中移除某个范围的元素。</td></tr><tr><td>public virtual void Reverse();</td><td>逆转 ArrayList 中元素的顺序。</td></tr><tr><td>public virtual void SetRange( int index, ICollection c );</td><td>复制某个集合的元素到 ArrayList 中某个范围的元素上。</td></tr><tr><td>public virtual void Sort();</td><td>对 ArrayList 中的元素进行排序。</td></tr><tr><td>public virtual void TrimToSize();</td><td>设置容量为 ArrayList 中元素的实际个数。</td></tr><tr><td></td><td></td></tr><tr><td>演示：</td><td></td></tr></tbody></table><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">namespace</span> CollectionApplication<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ArrayList al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Adding some numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Capacity: {0} "</span><span class="token punctuation">,</span> al<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}"</span><span class="token punctuation">,</span> al<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token keyword">in</span> al<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Sorted Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            al<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token keyword">in</span> al<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：  </p><pre class=" language-csharp"><code class="language-csharp">Adding some numbers<span class="token punctuation">:</span>Capacity<span class="token punctuation">:</span> <span class="token number">8</span>Count<span class="token punctuation">:</span> <span class="token number">7</span>Content<span class="token punctuation">:</span> <span class="token number">45</span> <span class="token number">78</span> <span class="token number">33</span> <span class="token number">56</span> <span class="token number">12</span> <span class="token number">23</span> <span class="token number">9</span>Content<span class="token punctuation">:</span> <span class="token number">9</span> <span class="token number">12</span> <span class="token number">23</span> <span class="token number">33</span> <span class="token number">45</span> <span class="token number">56</span> <span class="token number">78</span>    </code></pre><h2 id="哈希表-Hashtable"><a href="#哈希表-Hashtable" class="headerlink" title="哈希表-Hashtable"></a><font color=#FF69B4>哈希表-Hashtable</font></h2><p>它使用键来访问集合中的元素。<br>当您使用键访问元素时，则使用哈希表，而且您可以识别一个有用的键值。哈希表中的每一项都有一个键/值对。键用于访问集合中的项目。    </p><p><font color=#00ffff>Hashtable的一些属性:</font> </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Count</td><td>获取 Hashtable 中包含的键值对个数。</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示 Hashtable 是否具有固定大小。</td></tr><tr><td>IsReadOnly</td><td>获取一个值，表示 Hashtable 是否只读</td></tr><tr><td>Item</td><td>获取或设置与指定的键相关的值。</td></tr><tr><td>Keys</td><td>获取一个 ICollection，包含 Hashtable 中的键。</td></tr><tr><td>Values</td><td>获取一个 ICollection，包含 Hashtable 中的值。</td></tr></tbody></table><p><font color=#00ffff>Hashtable的一些方法:</font> </p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual void Add( object key, object value );</td><td>向 Hashtable 添加一个带有指定的键和值的元素。</td></tr><tr><td>public virtual void Clear();</td><td>从 Hashtable 中移除所有的元素。</td></tr><tr><td>public virtual bool ContainsKey( object key );</td><td>判断 Hashtable 是否包含指定的键。</td></tr><tr><td>public virtual bool ContainsValue( object value );</td><td>判断 Hashtable 是否包含指定的值。</td></tr><tr><td>public virtual void Remove( object key );</td><td>从 Hashtable 中移除带有指定的键的元素</td></tr></tbody></table><p>演示：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">namespace</span> CollectionsApplication<span class="token punctuation">{</span>   <span class="token keyword">class</span> <span class="token class-name">Program</span>   <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         Hashtable ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"Abida Rehman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"Joe Holzner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"Mausam Benazir Nur"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"M. Amlan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"M. Arif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"007"</span><span class="token punctuation">,</span> <span class="token string">"Ritesh Saikia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This student name is already in the list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>            ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"008"</span><span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 获取键的集合</span>         ICollection key <span class="token operator">=</span> ht<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> k <span class="token keyword">in</span> key<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token number">007</span><span class="token punctuation">:</span> Ritesh Saikia<span class="token number">004</span><span class="token punctuation">:</span> Mausam Benazir Nur<span class="token number">005</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span> Amlan<span class="token number">008</span><span class="token punctuation">:</span> Nuha Ali<span class="token number">002</span><span class="token punctuation">:</span> Abida Rehman<span class="token number">003</span><span class="token punctuation">:</span> Joe Holzner<span class="token number">001</span><span class="token punctuation">:</span> Zara Ali<span class="token number">006</span><span class="token punctuation">:</span> M<span class="token punctuation">.</span> Arif</code></pre><h2 id="排序列表-SortedList"><a href="#排序列表-SortedList" class="headerlink" title="排序列表-SortedList"></a><font color=#FF69B4>排序列表-SortedList</font></h2><p>……..  </p><h1 id="List-用法总结"><a href="#List-用法总结" class="headerlink" title="List 用法总结"></a><font color=#FF69B4>List 用法总结</font></h1><p>列表可以存储任何类型的数据，在创建列表对象的时候首先要指定你要创建的这个列表要存储什么类型的  </p><ol><li>创建列表  </li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//创建列表</span><span class="token comment" spellcheck="true">//方法一</span>List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个空的列表 通过类型后面的&lt;>来表示这个列表存储的数据的类型</span><span class="token comment" spellcheck="true">//方法二</span><span class="token keyword">var</span> intlist1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法三</span> <span class="token keyword">var</span> intlist2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个列表，里面的初始值有三个分别为 1 2 3</span></code></pre><ol start="2"><li><p>遍历列表  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环体list[i]</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//依次取得list中的每一个元素赋值给temp，并执行循环体</span> <span class="token comment" spellcheck="true">//循环体 temp</span><span class="token punctuation">}</span></code></pre></li><li><p>列表的常用属性方法  </p></li></ol><table><thead><tr><th>方法或者属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity属性</td><td>获取容量大小</td></tr><tr><td>Add()</td><td>方法添加元素</td></tr><tr><td>Insert()</td><td>插入元素</td></tr><tr><td>Count属性</td><td>访问元素个数</td></tr><tr><td>RemoveAt()</td><td>移除指定位置的元素</td></tr><tr><td>IndexOf()</td><td>取得一个元素所在列表中的索引位置</td></tr><tr><td>LastIndexOf()</td><td>上面的方法是从前往后搜索，这个是从后往前搜索，搜索到满足条件的就停止,上面的两个方法，如果没有找到指定元素就返回-1</td></tr><tr><td>Sort()</td><td>对列表中是元素进行从小到大排序</td></tr></tbody></table><p>演示：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scoreList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向指定索引位置插入元素，原来的元素向后移动一位。插入索引不能超出索引范围，插入索引最大可为scoreList.Count</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scoreList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//removeAt（index）填入要删除的索引.</span><span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查找不到返回<span class="token operator">-</span><span class="token number">1</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>scoreList<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> scoreList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历列表</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scoreList<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> temp <span class="token keyword">in</span> scoreList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#-字符串</title>
      <link href="2021/032338653.html"/>
      <url>2021/032338653.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用字符串操作"><a href="#常用字符串操作" class="headerlink" title="常用字符串操作"></a>常用字符串操作</h1><ol><li><p><font color =#00ffff>变量.Length：取字符串长度:</font><br>如:  </p><pre class=" language-csharp"><code class="language-csharp">String  str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>  Int len<span class="token operator">=</span>str<span class="token punctuation">.</span>Length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Len是自定义变量，str是字符串的变量名  </span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>   </code></pre><p>输出结果：5  </p></li><li><p><font color =#00ffff>变量.Substring(参数1,参数2):</font><br>截取字串的一部分，参数1为左起始位数，参数2为截取几位。<br>如:  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span>  str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}"</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：el  </p></li><li><p><font color =#00ffff>char.IsWh iteSpace(字符串变量，位数)</font><br>查指定位置是否空字符  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str<span class="token operator">=</span><span class="token string">"he llo"</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsWhiteSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>输出结果：True  </p></li><li><p><font color =#00ffff>char.IsPunctuation(‘字符’)</font><br>查字符是否是标点符号  </p><pre class=" language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsPunctuation</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsPunctuation</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：False  True  </p></li><li><p><font color =#00ffff>Trim() :</font><br>清除字串前后空格<br>```csharp<br>string str=”  hello  ”;</p></li></ol><p>Console.WriteLine(“{0}”,str.Trim());</p><pre><code>输出结果：hello  6. &lt;font color =#00ffff&gt;变量.Replace(“要替换的”,”替换为”)&lt;/font&gt;  字符串替换  ```csharp  string str=”helle”;Console.WriteLine(“&#123;0&#125;”,str.Replace(“e”,”o”));</code></pre><p>输出结果：hello<br>7. <font color =#00ffff>Split()</font><br>将字符串拆分为子字符串(如将句子拆分为各个单词)<br>Split() 方法使用分隔符（如空格字符）  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> delimit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">' '</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">string</span> s14 <span class="token operator">=</span> <span class="token string">"The cat sat on the mat."</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> substr <span class="token keyword">in</span> s14<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>delimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><p>The</p><p>cat</p><p>sat</p><p>on</p><p>the</p><p>mat.<br>8. <font color =#00ffff>ToUpper() 和 ToLower()：</font><br>更改大小写字母  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果：HELLO<br>9. <font color =#00ffff>IndexOf() 、LastIndexOf() </font><br>查找字串中指定字符或字串首次（最后一次）出现的位置,返回索引值.  </p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">string</span> str<span class="token operator">=</span>”hello”<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//查找“e”在str中的索引值（位置） </span><span class="token comment" spellcheck="true">//结果为：1</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//查找“el”的第一个字符在str中的索引值（位置） </span><span class="token comment" spellcheck="true">//结果为：2</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"字串"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//从str1第4个字符起，查找2个字符，查找“字串”的第一个字符在str1中的索引值（位置）</span>tring str<span class="token operator">=</span>”hellogood”<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>“og”<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：-1</span></code></pre><ol start="10"><li><p><font color =#00ffff>str1.EndsWith(str2)</font><br>检测字串str1是否以字串str2结尾,返回布尔值.  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">string</span> str1 <span class="token operator">=</span> <span class="token string">"hi,hello"</span><span class="token punctuation">;</span><span class="token keyword">string</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>"<span class="token punctuation">.</span>EndsWith的用法”<span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：True  </span></code></pre></li><li><p> <font color =#00ffff>str1.Equals(str2)</font><br>检测字串str1是否与字串str2相等,返回布尔值  </p></li><li><p><font color =#00ffff>Insert()</font><br>在字串中指定索引位插入指定字符。  </p></li><li><p><font color =#00ffff>Remove():</font><br>从指定位置删除指定位数的字符</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#-数组</title>
      <link href="2021/032317252.html"/>
      <url>2021/032317252.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><font color =#00ffff>声明数组：</font><br>采用以下方式声明数组  <pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>TypeNmae<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//例如</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>这种数组又叫做矩形数组，其每一行的元素个数都相同。</p><ol><li><font color =#00ffff>数组声明：</font>  <pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//二维</span><span class="token operator">&lt;</span>baseType<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多维只需要加，</span><span class="token operator">&lt;</span>baseType<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> array <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h1 id="数组的数组"><a href="#数组的数组" class="headerlink" title="数组的数组"></a>数组的数组</h1>这种数组又叫锯齿数组，其每行的元素个数可能不同。  </li><li>声明格式：  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jaggedIntArray<span class="token punctuation">;</span></code></pre></li><li>初始化：<br>这种数组的初始化不能像上面的数组一样，例如<font color=#ff0000>不能</font>采用：  <pre class=" language-csharp"><code class="language-csharp">jaggedIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>即使可以这样做，也不是很有效，因为这样完全可以用多维数组代替，也<font color=#ff0000>不能</font>使用下面的代码：  <pre class=" language-csharp"><code class="language-csharp">jaggedIntArray<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>那么要怎么样声明呢？如下：<br>```csharp<br>jaggedIntArray =new int [2][];<br>jaggedIntArray[0] =new int[3];<br>jaggedIntArray[1]=new int[4];</li></ol><p>//也可以使用：<br>int [][] jaggedIntArray =new {new int[]{1,2,3},new int[]{1},new int[] {1,2,}};</p><pre><code>   </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D项目总结（持续更新中）</title>
      <link href="2021/032341153.html"/>
      <url>2021/032341153.html</url>
      
        <content type="html"><![CDATA[<h1 id="BommGuy-项目总结"><a href="#BommGuy-项目总结" class="headerlink" title="BommGuy 项目总结"></a>BommGuy 项目总结</h1><p>前言；转眼之间就要到了毕业找工作的时候，在此，把大学期间做过的一些小Demo重新看一看，总结一下。  </p><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>这个Demo 是Unity官方推送的Michael老师的2d教程，正好当时打算玩玩Unity的2D方向，就参考着进行制作。<br>游戏素材源自“pixelfrog”：<br><img src="https://i.loli.net/2021/03/23/jKUru5AbdxyzZwa.png" alt="游戏素材"><br>为了征求许可，还特地去Twitter上找到他，进行了询问。<br>游戏共有6个角色，每个角色都配备了攻击、跑、死亡、初始等序列帧动画。<br><img src="https://i.loli.net/2021/03/23/2boCPshMLvn9Hfy.png" alt="游戏素材导入Unity">  </p><h2 id="素材处理"><a href="#素材处理" class="headerlink" title="素材处理"></a>素材处理</h2><p>由于这些素材的分辨率不统一，所以得先进行处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> 项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="2021/032253518.html"/>
      <url>2021/032253518.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><p> </p><p>示例 1：<br>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。  </p><p>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：  </p><p>输入：nums = [3,3], target = 6<br>输出：[0,1] </p><p>提示：</p><p>2 &lt;= nums.length &lt;= 103<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案  </p><h2 id="暴力法实现"><a href="#暴力法实现" class="headerlink" title="暴力法实现"></a>暴力法实现</h2><p>C语言实现：  </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>               ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>               ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>               <span class="token keyword">return</span> ret<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>C#实现：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h2><p>C语言实现：  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> hashTable <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> hashTable<span class="token operator">*</span> hashtable<span class="token punctuation">;</span><span class="token keyword">struct</span> hashTable<span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> ikey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ikey<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> ikey<span class="token punctuation">,</span> <span class="token keyword">int</span> ival<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>ikey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> hashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>key <span class="token operator">=</span> ikey<span class="token punctuation">,</span> tmp<span class="token operator">-></span>val <span class="token operator">=</span> ival<span class="token punctuation">;</span>        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        it<span class="token operator">-></span>val <span class="token operator">=</span> ival<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hashtable <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> hashTable<span class="token operator">*</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token operator">-></span>val<span class="token punctuation">,</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>C#实现:  </p><pre class=" language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义一个int，int 类型的哈希表</span>            Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> myDic <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一个不用判断，因为表里没值</span>            myDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断target-nums[i]是否在哈希表里，在的话就说明找到了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>myDic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>myDic<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>                myDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span></code></pre><h2 id="附C-Hash表的相关信息"><a href="#附C-Hash表的相关信息" class="headerlink" title="附C# Hash表的相关信息"></a>附C# Hash表的相关信息</h2><p>在 C# 中，官方的哈希表实现为 Dictionary<br><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.hashtable?f1url=https://msdn.microsoft.com/query/dev16.query?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Collections.Hashtable);k(DevLang-csharp)&rd=true&view=netframework-4.8">官方文档</a><br><a href="https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md">Github</a><br>题目出处及其他解法： <a href="https://leetcode-cn.com/problems/two-sum/">LeetCode</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity-第一人称人物控制</title>
      <link href="2021/032032643.html"/>
      <url>2021/032032643.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一人称的移动、跳跃控制"><a href="#第一人称的移动、跳跃控制" class="headerlink" title="第一人称的移动、跳跃控制"></a>第一人称的移动、跳跃控制</h1><ol><li><p>新建一个Capsule<br><img src="https://i.loli.net/2021/03/20/s5tkxMpFfwNWnGh.png"></p></li><li><p>为其添加CharacterContronller 组件<br><img src="https://i.loli.net/2021/03/20/eOAbyvwS67FRfI1.png"></p></li><li><p>将相机移动为Capsule子物体并移动到上方<br><img src="https://i.loli.net/2021/03/20/vfX5h6b8Y7QeKAm.png"></p></li><li><p>位相机添加MouseContronller 脚本</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MouseController</span> <span class="token punctuation">:</span> MonoBehaviour<span class="token punctuation">{</span> <span class="token keyword">public</span> Transform player <span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">float</span> mouseSpeed <span class="token operator">=</span><span class="token number">100f</span><span class="token punctuation">;</span> <span class="token keyword">float</span> xRotation<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">float</span> mouseX <span class="token operator">=</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse X"</span><span class="token punctuation">)</span> <span class="token operator">*</span> mouseSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>     <span class="token keyword">float</span> mouseY <span class="token operator">=</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse Y"</span><span class="token punctuation">)</span> <span class="token operator">*</span> mouseSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime <span class="token punctuation">;</span>     xRotation <span class="token operator">-</span><span class="token operator">=</span> mouseY<span class="token punctuation">;</span>     xRotation <span class="token operator">=</span>Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>xRotation<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span><span class="token number">90f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     tranform<span class="token punctuation">.</span>LocalRotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span>xRotation<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     player<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>up<span class="token operator">*</span>mouseX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2021/03/20/Gi8OlkIATPYsUnH.png" alt="控制上下左右旋转代码">  </p></li><li><p>为人物添加PlayerController 代码  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerController</span> <span class="token punctuation">:</span> MonoBehaviour<span class="token punctuation">{</span> <span class="token keyword">public</span> CharacterController controller<span class="token punctuation">;</span> <span class="token keyword">public</span> Transform checkPoint<span class="token punctuation">;</span> <span class="token keyword">public</span> LayerMask ground<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> radius<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> speed <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> gravity <span class="token operator">=</span><span class="token operator">-</span><span class="token number">9.81f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">float</span> jumpHeight <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span> <span class="token keyword">private</span> Vector3 velocity<span class="token punctuation">;</span> <span class="token keyword">bool</span> isGround<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     isGround <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">CheckSphere</span><span class="token punctuation">(</span>checkPoint <span class="token punctuation">,</span> radius <span class="token punctuation">,</span>ground<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>isGround <span class="token operator">&amp;&amp;</span> velocity<span class="token punctuation">.</span>y<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         velocity<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1f</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">float</span> x <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">float</span> z <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Vetical"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Vector3 move <span class="token operator">=</span> tranform<span class="token punctuation">.</span>rigth<span class="token operator">*</span>x <span class="token operator">+</span> tranform<span class="token punctuation">.</span>forward <span class="token operator">*</span> z<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>isGround <span class="token operator">&amp;&amp;</span> Input<span class="token punctuation">.</span><span class="token function">GetButtonDwon</span><span class="token punctuation">(</span><span class="token string">"Jump"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>jumpHeight<span class="token operator">*</span><span class="token operator">-</span><span class="token number">3.0f</span> <span class="token operator">*</span> gravity<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     controller<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>move<span class="token operator">*</span> speed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     velocity<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> gravity<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>     controller<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>velocity<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2021/03/20/g2oNOcEVZLj5X6J.png" alt="人物移动及掉落代码">    </p></li></ol><p>CharacterController.Move() 参考：<a href="https://docs.unity3d.com/cn/2019.4/ScriptReference/CharacterController.Move.html">Unity官方手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 人物控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-接口</title>
      <link href="2021/032025834.html"/>
      <url>2021/032025834.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是把公共实例（非静态）方法和属性组合起来，以封装特定功能的一个集合。<br><font color =#00ffff>接口不能单独存在，不能像实例化一个类那样实例化接口。另外，接口不能包含实现其成员的任何代码，只能定义成员本身。实现的过程需要在实现接口的类中完成。</font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> Interface <span class="token class-name">IKillable</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Interface <span class="token class-name">IDamageable</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Damage</span><span class="token punctuation">(</span>T damageTaken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Avatar</span> <span class="token punctuation">:</span> MonoBehaviour <span class="token punctuation">,</span>IKillable<span class="token punctuation">,</span>IDamageable<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: do something</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Damage</span><span class="token punctuation">(</span><span class="token keyword">float</span> damage<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-重写</title>
      <link href="2021/032031161.html"/>
      <url>2021/032031161.html</url>
      
        <content type="html"><![CDATA[<h1 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a>Overriding</h1><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Humanoid</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//叫</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span> <span class="token punctuation">:</span> Humanoid<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span>Yell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//叫</span>        <span class="token comment" spellcheck="true">//跑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Silme</span> <span class="token punctuation">:</span> Enemy<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//叫 跑</span>        <span class="token comment" spellcheck="true">//攻击</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-成员隐藏</title>
      <link href="2021/032025519.html"/>
      <url>2021/032025519.html</url>
      
        <content type="html"><![CDATA[<h1 id="成员隐藏"><a href="#成员隐藏" class="headerlink" title="成员隐藏"></a>成员隐藏</h1><p>通过继承，父类的成员在子类中自动可用，或者继承到子类中。<br>在子类中重新创建即重新声明父类成员的过程叫做成员隐藏。<br>隐藏成员同样通过new关键字实现，不过方式略有不同。  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Humanoid</span><span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//叫</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span> <span class="token punctuation">:</span> Humanoid<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//跑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Silme</span> <span class="token punctuation">:</span> Enemy<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name">void</span> <span class="token function">Yell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//攻击</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-多态</title>
      <link href="2021/032027786.html"/>
      <url>2021/032027786.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态可以把某个派生类型的变量赋值给基本类型的变量。<br>假如现在有Animal类，Animal中有EatFood()方法<br>然后Cow类中也有EatFood()和Moo()方法<br>现在Cow继承自Animal，那么可以不用强制转换就可以通过这个变量来调用基类的方法。：<br>Animal myAnimal = new Cow();<br>myAnimal.EatFood();<br>结果就是调用派生类型中的EatFood()的实现代码。但是，不能以相同的方式来调用派生类型上定义的方法，例如:<br>myAnimal.Moo();<br>则无法运行。<br>但是可以把基本类型的变量转换为派生类型变量，调用派生类的方法，例如:<br>Cow myNewCow =(Cow) myAnimal;<br>myNewCow.Moo(); </p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-继承</title>
      <link href="2021/031824724.html"/>
      <url>2021/031824724.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>当一个类继承一个类时，他会获得被继承类的特征<br>被继承类又叫做 父类 or 基类<br>继承类又叫做 子类 or 派生类<br>在继承时，需要注意父类的访问修饰符  </p><ol><li><font color =#00ffff> public</font><br>存在于子类中且可以被父类、子类、其他类访问  </li><li><font color =#00ffff>protected </font><br>存在于子类且可以被访问，但是在父类或子类以外不可以被访问  </li><li><font color=#00ffff>private </font><br>存在于子类，但是不可以被访问  </li></ol><p>在子类继承的项中，构造函数是个例外，因为构造函数对类是唯一的，不会共享。但是在子类调用构造函数时，欺父类的构造函数会被立即调用，由于类可能有多个不同的构造函数，因此我们可能想要控制调用哪个基类构造函数，为此可以使用关键字：<font color =#00ffff>base </font> 通过在子类构造函数的参数列表后面加一个 : baxe(“xxx”)<br>如果不显式调用基类的构造函数，则会隐式调用默认的构造函数<br>base 还可以用来访问基类的其他成员，例如重写。</p><p>在unity中，所有类都是默认继承自MonoBehaviour 类  </p><h2 id="MonoBehaviour"><a href="#MonoBehaviour" class="headerlink" title="MonoBehaviour"></a>MonoBehaviour</h2><h2 id="MonoBehaviour-九大生命周期"><a href="#MonoBehaviour-九大生命周期" class="headerlink" title="MonoBehaviour 九大生命周期"></a>MonoBehaviour 九大生命周期</h2><ol><li><font color =#00ffff>Awake()</font><br>在加载场景时运行 , 即在游戏开始之前初始化变量或者游戏状态 . 只执行一次</li><li><font color =#00ffff>OnEnable()</font><br>在激活当前脚本时调用 , 每激活一次就调用一次该方法</li><li><font color =#00ffff>Start()</font><br>在第一次启动时执行 , 用于游戏对象的初始化 , 在Awake 函数之后执行,只执行一次</li><li><font color =#00ffff>FixUpdate()</font><br>固定频率调用 , 与硬件无关, 可以在 Edit -&gt; Project Setting -&gt; Time -&gt; Fixed Time Step 修改</li><li><font color =#00ffff>Update()</font><br>几乎每一帧都在调用 , 取决于你的电脑硬件 , 不稳定</li><li><font color =#00ffff>LateUpdate()</font><br>在Update函数之后调用 , 一般用作摄像机跟随</li><li><font color =#00ffff>OnGUI()</font><br>调用速度是上面的两倍 , 一般用于老版本的额 GUI 显示</li><li><font color =#00ffff>Ondisable()</font><br>和 OnEnable 函数成对出现 , 只要从激活状态变为取消激活状态 , 就会执行一次 (和 OnEnable互斥)</li><li> <font color =#00ffff>OnDestroy()</font><br>当前游戏对象或游戏组件被销毁时执行</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> MonoBehaviour </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-三元运算符</title>
      <link href="2021/031839328.html"/>
      <url>2021/031839328.html</url>
      
        <content type="html"><![CDATA[<h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>三元运算符是 if else 的另一种写法，在某些情况下，比if-else 更加简洁。<br>具体写法如下：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>    max<span class="token operator">=</span>  a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token punctuation">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的意思是 a&gt;b的话，max=a，否则max=b</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-泛型</title>
      <link href="2021/03181926.html"/>
      <url>2021/03181926.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型是一个特征，通过该特征，类型可以作为参数传递给类或者方法。像Unity中的GetComponent就是泛型方法。  </p><h2 id="如何创建泛型"><a href="#如何创建泛型" class="headerlink" title="如何创建泛型"></a>如何创建泛型</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> param<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>无论T是什么类型，传入什么类型，T就对应成这个类型。  </p><h2 id="限制泛型"><a href="#限制泛型" class="headerlink" title="限制泛型"></a>限制泛型</h2><ol><li>T是引用类型<pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T ：<span class="token keyword">class</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>T是值类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">struct</span>  <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>不含参数的公共构造函数  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>class name 限制为具体某个类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T<span class="token punctuation">:</span> Transform <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>Interfaces 接口类型  <pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">{</span> <span class="token keyword">public</span> T <span class="token generic-method function">GenericMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T param<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span>IEnumerable <span class="token punctuation">{</span>     <span class="token keyword">return</span> param<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-方法重载</title>
      <link href="2021/03189249.html"/>
      <url>2021/03189249.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathAdd</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">string</span> a<span class="token punctuation">,</span> <span class="token keyword">string</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如上，我们需要实现一个俩个整数相加的方法，然后现在又需要实现 俩个字符串相加，那么是不是需要再写个string AddString()的方法呢?<br>这里就可以使用  方法重载  方法名相同，参数不同。这时，当我们在使用的时候会出现是三种情况：  </p><ol><li>输入的参数完全匹配–&gt;运行完全匹配的重载方法 。 </li><li>输入的参数不完全匹配–&gt;系统将查看所有的可能匹配项，并选择一个需要最少转换量的版本。</li><li>如果没有匹配项或者匹配项的多个版本所需转换量相同–&gt; Error!</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-static</title>
      <link href="2021/031838921.html"/>
      <url>2021/031838921.html</url>
      
        <content type="html"><![CDATA[<h1 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h1><p>静态成员，如变量和方法，是跨越类的所有实例共享的成员。  静态成员，可以通过类直接访问，而无需类的实例。 </p><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>静态变量在类的每个对象中具有相同的值，也是说只要在一个地方修改了这个变量，其他地方的静态变量也会随之改变。例如：  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enemy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Enemy enemy1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enemy enemy2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enemy enemy3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> Enemy<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时count = 3  </p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法属于类，而不属于类的实例，所以不需要通过类的实例来访问。 </p><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>静态类的创建需要在 class 前加 static关键字，静态类不能继承不能实例化，且静态类中的方法、变量也需要是静态的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-属性</title>
      <link href="2021/031817671.html"/>
      <url>2021/031817671.html</url>
      
        <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>我们经常需要在A类中访问B类的成员变量，通常我们会将B类的成员变量设置为public，但是还有更好的方法，那就是使用属性（字段）。  </p><h2 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> experience<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装属性，一般与字段同名，首字母大写</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Experience    <span class="token punctuation">{</span>        <span class="token keyword">get</span>｛<span class="token keyword">return</span> experience<span class="token punctuation">;</span>｝        <span class="token keyword">set</span>｛experience <span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">;</span>｝    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    Player player <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    player<span class="token punctuation">.</span>Experience<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> currentEx<span class="token operator">=</span>player<span class="token punctuation">.</span>Experience<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然 experience 在player类中是私有的，但是通过set 和get 可以访问这个属性。  </p><p>还可以通过get 和 set 来限制只读、只写、可写可读。  </p><p><font color = #00ffff>另外一种写法：  </font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> Level<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在vs中可以通过输入 “prpo” 加回车 快速生存</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中级-Extension Methods</title>
      <link href="2021/031852531.html"/>
      <url>2021/031852531.html</url>
      
        <content type="html"><![CDATA[<h1 id="Extension-Methods"><a href="#Extension-Methods" class="headerlink" title="Extension Methods"></a>Extension Methods</h1><p>通过扩展方法可以向类中添加方法，而不用创建DirveType 或者更改原始类型。<br>例如Unity的transform类，假如现在我们需要一个方法来重置物体位置，这个方法最合适写在Transform类中，但是这个类不允许我们修改，当然把它作为派生类也没有意义，这时就可以用扩展方法来向Transform类中加入这个方法。  </p><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p><font color =#00ffff>扩展方法需要写成静态的，而仅仅加 static 关键字 ，那么这个类就是静态类了，所以需要使用this关键字。</font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">ExtensionTools</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//this 后面跟扩展的类型，这里是Transform类型，如果还有其他参数可以写在后面  </span>    <span class="token comment" spellcheck="true">//但是第一参数一定是 this + 扩展的类型 + 变量名</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ResetTransfoem</span><span class="token punctuation">(</span><span class="token keyword">this</span> Transform transform<span class="token punctuation">)</span><span class="token punctuation">{</span>        transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>        transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">;</span>        transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><p>使用这个方法只需要把它看成类的成员  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> Monobehaviour<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        transform<span class="token punctuation">.</span><span class="token function">ResetTransfoem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式:观察者模式</title>
      <link href="2021/031710582.html"/>
      <url>2021/031710582.html</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="观察者模式介绍："><a href="#观察者模式介绍：" class="headerlink" title="观察者模式介绍："></a><font color = #00ffff>观察者模式介绍：</font></h2><p>观察者模式类似于微信公众号的订阅，当公众号发布消息时，所有订阅当前公众号的人都会收到消息。观察者模式定义了一对多的关系，多个观察者对象监听同一个主题对象，当主题对象发生变化时，通知所有观察者对象，使他们能够自动更新。</p><h2 id="观察者结构："><a href="#观察者结构：" class="headerlink" title="观察者结构："></a><font color =#00ffff>观察者结构：</font></h2><ol><li>抽象主题角色（Subject）:抽象主题把所有观察者对象的引用保存在一个列表中，并提供增加和删除观察者对象的操作，一般有叫作抽象观察者角色，通常由抽象类或者接口实现。  </li><li>抽象观察者角色（Observer）：为所有具体观察者定义一个接口，在得到主题通知时更新自己，一般由抽象类或者接口实现。</li><li>具体主题角色（ConCreteSubject）：实现抽象主题接口，又叫作具体被观察者角色。</li><li>集体观察者角色（ConcreteObserver）：实现抽象观察者角色所要求的接口，使自身状态与主题状态相协调。</li></ol><h2 id="观察者模式的简单实现："><a href="#观察者模式的简单实现：" class="headerlink" title="观察者模式的简单实现："></a><font color =#00ffff>观察者模式的简单实现：</font></h2><p>接下来以订阅号为例，实现简单的观察者模式：  </p><ol><li><p><font color = #00ffff>订阅号抽象类：  </font></p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DingYueHao</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//保存订阅者的列表</span>     <span class="token keyword">private</span> List<span class="token operator">&lt;</span>IObserver<span class="token operator">></span> observer <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">List</span><span class="token operator">&lt;</span>Observer<span class="token operator">></span><span class="token punctuation">;</span>     <span class="token keyword">public</span> strig Text<span class="token punctuation">{</span><span class="token keyword">get</span> <span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">string</span> Info <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">DingYueHao</span><span class="token punctuation">(</span><span class="token keyword">string</span> text <span class="token punctuation">,</span> <span class="token keyword">string</span> info<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>Text<span class="token operator">=</span>text<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>Info <span class="token operator">=</span>info<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//加入观察者(订阅的人)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddObserver</span><span class="token punctuation">(</span>IObserver ob<span class="token punctuation">)</span><span class="token punctuation">{</span>         observer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//移除观察者</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveObserver</span><span class="token punctuation">(</span>IObserver ob<span class="token punctuation">)</span><span class="token punctuation">{</span>         observer<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//遍历订阅的人，进行通知</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span>IObserver ob <span class="token keyword">in</span> observer<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ob<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//TODO 通知事项</span>                 ob<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p><font color = #00ffff> 具体的订阅号类 </font><br>```csharp<br>public class EasyyGame:DingYueHao<br>{</p></li></ol><p>}</p><pre><code>1. &lt;font color =#00ffff&gt; 订阅者接口&lt;/font&gt;```csharppublic interface IObserver&#123;    void ReceiveMessage(DingYueHao dyh);&#125;</code></pre><ol start="4"><li><font color =#00ffff >具体的订阅者 </font><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subscriber</span><span class="token punctuation">:</span>IObserver <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">string</span> Name<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">Subscriber</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span>name<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>DingYueHao dyh<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">writeline</span><span class="token punctuation">(</span><span class="token string">"notifide{0}of{1}"</span><span class="token operator">+</span><span class="token string">"info is{2}"</span><span class="token punctuation">,</span>Name <span class="token punctuation">,</span>dyh<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>dyh<span class="token punctuation">.</span>Info<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><font color =#00ffff> 测试类</font><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         DingYueHao dyh <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">EasyyGame</span><span class="token punctuation">(</span><span class="token string">"Easyy!"</span><span class="token punctuation">,</span><span class="token string">"new game published!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dyh<span class="token punctuation">.</span><span class="token function">AddObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dyh<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="具体的游戏案例"><a href="#具体的游戏案例" class="headerlink" title="具体的游戏案例"></a>具体的游戏案例</h2><p>我们需要在游戏结束时，利用GameManager 通知所有敌人：玩家已经死亡，停止移动、播放胜利动画等等。<br>订阅者接口：IEndGameObserver  –&gt; Notify()<br>具体主题角色：GameManager<br>观察者：EnemyController</p><ol><li><p><font color = #00ffff> 具体主题角色 </font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> GameManager <span class="token punctuation">:</span>Mono<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> GameManager instance<span class="token punctuation">;</span> List<span class="token operator">&lt;</span>IEndGameObserver<span class="token operator">></span> observer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>IEndGameObserver<span class="token operator">></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddObserver</span><span class="token punctuation">(</span>IEndGameObserver ob<span class="token punctuation">)</span><span class="token punctuation">{</span>     observer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveObserver</span><span class="token punctuation">(</span>IEndGameObserver ob<span class="token punctuation">)</span><span class="token punctuation">{</span>     observer<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> ob <span class="token keyword">in</span> observer<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         ob<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>玩家死亡<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">EndNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre></li><li><p><font color =#00ffff>订阅者接口</font>  </p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEndGameObserver</span><span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre></li><li><p><font color =#00ffff>订阅者</font>  </p></li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnemyController</span> <span class="token punctuation">:</span> Mono <span class="token punctuation">,</span>IEndGameObserver<span class="token punctuation">{</span>    instance<span class="token punctuation">.</span><span class="token function">AddObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: 玩家死亡之后的一系列动作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="观察者模式的优缺点"><a href="#观察者模式的优缺点" class="headerlink" title="观察者模式的优缺点"></a>观察者模式的优缺点</h2><p>优点： </p><ul><li> 观察者模式实现了表示层和数据逻辑层的分离，并定义了稳定的更新消息传递机制，并抽象了更新接口，使得可以有各种各样不同的表示层，即观察者。</li><li> 观察者模式在被观察者和观察者之间建立了一个抽象的耦合，被观察者并不知道任何一个具体的观察者，只是保存着抽象观察者的列表，每个具体观察者都符合一个抽象观察者的接口。  </li><li> 观察者模式支持广播通信。被观察者会向所有的注册过的观察者发出通知。<br>缺点：  </li><li>如果一个被观察者有很多直接和间接的观察者时，将所有的观察者都通知到会花费很多时间。</li><li>虽然观察者模式可以随时使观察者知道所观察的对象发送了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎样发生变化的。</li><li>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃，在使用观察者模式应特别注意这点。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式:单例模式</title>
      <link href="2021/031739727.html"/>
      <url>2021/031739727.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ol><li><p><strong>什么是单例模式？</strong><br>单例模式是保证一个类只有一个实例，并且提供一个全局访问点。  </p></li><li><p><strong>如何创建单例模式？</strong>  </p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>         pricate <span class="token keyword">static</span> Singleton Instence<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  </code></pre></li><li><p><strong>单例模式使用的场景？</strong><br>单例模式常用与管理类，如GameManager、UIManager、SoundManager等。</p></li><li><p><strong>单例模式与静态类的区别？</strong></p><ul><li>静态类是不可以继承的，因此不能继承MonoBehaviour类。而单例模式可以继承，可以继承MonoBehaviour类，可以在面板显示一些公共属性。</li><li>静态类中的成员会一直保存到应用退出，而单例类的成员会随着场景的切换而被销毁的。  </li></ul></li></ol><h1 id="泛型单例"><a href="#泛型单例" class="headerlink" title="泛型单例"></a>泛型单例</h1><p>优点：可以把所有的单例模式都继承自 泛型单例， 这样就不用在每个单例类中都再写一遍类的实例化。  </p><p>实现：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> MonoBehaviour <span class="token keyword">where</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> Singleton<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有类型，需要提供公开的访问方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> T instence<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//提供全局访问点</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> T Instance <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span><span class="token keyword">return</span> instence<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//虚方法，可以在继承类中重写</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断实例是否唯一</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instence<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>            instance <span class="token operator">=</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断实例是否被初始化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> IsInitialized<span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">{</span> <span class="token keyword">return</span> instance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//虚方法，可以被重写，如果被销毁，那么设置单例为空</span>    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDestory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            intance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity在安卓上实现简单的相机旋转、缩放</title>
      <link href="2021/031614757.html"/>
      <url>2021/031614757.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
